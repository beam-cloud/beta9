// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: imageservice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceClient interface {
	VerifyBuild(ctx context.Context, in *VerifyBuildRequest, opts ...grpc.CallOption) (*VerifyBuildResponse, error)
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (ImageService_BuildClient, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) VerifyBuild(ctx context.Context, in *VerifyBuildRequest, opts ...grpc.CallOption) (*VerifyBuildResponse, error) {
	out := new(VerifyBuildResponse)
	err := c.cc.Invoke(ctx, "/imageservice.ImageService/VerifyBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (ImageService_BuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[0], "/imageservice.ImageService/Build", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageServiceBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageService_BuildClient interface {
	Recv() (*BuildResponse, error)
	grpc.ClientStream
}

type imageServiceBuildClient struct {
	grpc.ClientStream
}

func (x *imageServiceBuildClient) Recv() (*BuildResponse, error) {
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations must embed UnimplementedImageServiceServer
// for forward compatibility
type ImageServiceServer interface {
	VerifyBuild(context.Context, *VerifyBuildRequest) (*VerifyBuildResponse, error)
	Build(*BuildRequest, ImageService_BuildServer) error
	mustEmbedUnimplementedImageServiceServer()
}

// UnimplementedImageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (UnimplementedImageServiceServer) VerifyBuild(context.Context, *VerifyBuildRequest) (*VerifyBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBuild not implemented")
}
func (UnimplementedImageServiceServer) Build(*BuildRequest, ImageService_BuildServer) error {
	return status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedImageServiceServer) mustEmbedUnimplementedImageServiceServer() {}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_VerifyBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).VerifyBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imageservice.ImageService/VerifyBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).VerifyBuild(ctx, req.(*VerifyBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceServer).Build(m, &imageServiceBuildServer{stream})
}

type ImageService_BuildServer interface {
	Send(*BuildResponse) error
	grpc.ServerStream
}

type imageServiceBuildServer struct {
	grpc.ServerStream
}

func (x *imageServiceBuildServer) Send(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imageservice.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyBuild",
			Handler:    _ImageService_VerifyBuild_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Build",
			Handler:       _ImageService_Build_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "imageservice.proto",
}
