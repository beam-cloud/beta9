// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ContainerRepository gRPC client types
//
// Command:
// $ goa gen github.com/beam-cloud/beta9/pkg/repository/dsl -o proto/goa

package client

import (
	containerrepository "github.com/beam-cloud/beta9/proto/goa/gen/container_repository"
	container_repositorypb "github.com/beam-cloud/beta9/proto/goa/gen/grpc/container_repository/pb"
)

// NewProtoGetContainerStateRequest builds the gRPC request type from the
// payload of the "GetContainerState" endpoint of the "ContainerRepository"
// service.
func NewProtoGetContainerStateRequest(payload *containerrepository.GetContainerStatePayload) *container_repositorypb.GetContainerStateRequest {
	message := &container_repositorypb.GetContainerStateRequest{
		ContainerId: payload.ContainerID,
	}
	return message
}

// NewProtoSetContainerStateRequest builds the gRPC request type from the
// payload of the "SetContainerState" endpoint of the "ContainerRepository"
// service.
func NewProtoSetContainerStateRequest(payload *containerrepository.SetContainerStatePayload) *container_repositorypb.SetContainerStateRequest {
	message := &container_repositorypb.SetContainerStateRequest{
		ContainerId: payload.ContainerID,
	}
	if payload.State != nil {
		message.State = svcContainerrepositoryContainerStateToContainerRepositorypbContainerState(payload.State)
	}
	return message
}

// protobufContainerRepositorypbContainerStateToContainerrepositoryContainerState
// builds a value of type *containerrepository.ContainerState from a value of
// type *container_repositorypb.ContainerState.
func protobufContainerRepositorypbContainerStateToContainerrepositoryContainerState(v *container_repositorypb.ContainerState) *containerrepository.ContainerState {
	if v == nil {
		return nil
	}
	res := &containerrepository.ContainerState{}

	return res
}

// svcContainerrepositoryContainerStateToContainerRepositorypbContainerState
// builds a value of type *container_repositorypb.ContainerState from a value
// of type *containerrepository.ContainerState.
func svcContainerrepositoryContainerStateToContainerRepositorypbContainerState(v *containerrepository.ContainerState) *container_repositorypb.ContainerState {
	if v == nil {
		return nil
	}
	res := &container_repositorypb.ContainerState{}

	return res
}
