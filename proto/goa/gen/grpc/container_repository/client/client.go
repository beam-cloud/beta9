// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ContainerRepository gRPC client
//
// Command:
// $ goa gen github.com/beam-cloud/beta9/pkg/repository/dsl -o proto/goa

package client

import (
	"context"

	container_repositorypb "github.com/beam-cloud/beta9/proto/goa/gen/grpc/container_repository/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli container_repositorypb.ContainerRepositoryClient
	opts    []grpc.CallOption
} // NewClient instantiates gRPC client for all the ContainerRepository service
// servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: container_repositorypb.NewContainerRepositoryClient(cc),
		opts:    opts,
	}
} // GetContainerState calls the "GetContainerState" function in
// container_repositorypb.ContainerRepositoryClient interface.
func (c *Client) GetContainerState() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildGetContainerStateFunc(c.grpccli, c.opts...),
			EncodeGetContainerStateRequest,
			nil)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
} // SetContainerState calls the "SetContainerState" function in
// container_repositorypb.ContainerRepositoryClient interface.
func (c *Client) SetContainerState() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildSetContainerStateFunc(c.grpccli, c.opts...),
			EncodeSetContainerStateRequest,
			nil)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}
