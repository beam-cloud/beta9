// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ContainerRepository gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/beam-cloud/beta9/pkg/repository/dsl -o proto/goa

package client

import (
	"context"

	containerrepository "github.com/beam-cloud/beta9/proto/goa/gen/container_repository"
	container_repositorypb "github.com/beam-cloud/beta9/proto/goa/gen/grpc/container_repository/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetContainerStateFunc builds the remote method to invoke for
// "ContainerRepository" service "GetContainerState" endpoint.
func BuildGetContainerStateFunc(grpccli container_repositorypb.ContainerRepositoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetContainerState(ctx, reqpb.(*container_repositorypb.GetContainerStateRequest), opts...)
		}
		return grpccli.GetContainerState(ctx, &container_repositorypb.GetContainerStateRequest{}, opts...)
	}
}

// EncodeGetContainerStateRequest encodes requests sent to ContainerRepository
// GetContainerState endpoint.
func EncodeGetContainerStateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*containerrepository.GetContainerStatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ContainerRepository", "GetContainerState", "*containerrepository.GetContainerStatePayload", v)
	}
	return NewProtoGetContainerStateRequest(payload), nil
} // BuildSetContainerStateFunc builds the remote method to invoke for
// "ContainerRepository" service "SetContainerState" endpoint.
func BuildSetContainerStateFunc(grpccli container_repositorypb.ContainerRepositoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.SetContainerState(ctx, reqpb.(*container_repositorypb.SetContainerStateRequest), opts...)
		}
		return grpccli.SetContainerState(ctx, &container_repositorypb.SetContainerStateRequest{}, opts...)
	}
}

// EncodeSetContainerStateRequest encodes requests sent to ContainerRepository
// SetContainerState endpoint.
func EncodeSetContainerStateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*containerrepository.SetContainerStatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ContainerRepository", "SetContainerState", "*containerrepository.SetContainerStatePayload", v)
	}
	return NewProtoSetContainerStateRequest(payload), nil
}
