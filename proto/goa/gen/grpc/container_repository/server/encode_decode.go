// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ContainerRepository gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/beam-cloud/beta9/pkg/repository/dsl -o proto/goa

package server

import (
	"context"

	containerrepository "github.com/beam-cloud/beta9/proto/goa/gen/container_repository"
	container_repositorypb "github.com/beam-cloud/beta9/proto/goa/gen/grpc/container_repository/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGetContainerStateResponse encodes responses from the
// "ContainerRepository" service "GetContainerState" endpoint.
func EncodeGetContainerStateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoGetContainerStateResponse()
	return resp, nil
}

// DecodeGetContainerStateRequest decodes requests sent to
// "ContainerRepository" service "GetContainerState" endpoint.
func DecodeGetContainerStateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *container_repositorypb.GetContainerStateRequest
		ok      bool
	)
	{
		if message, ok = v.(*container_repositorypb.GetContainerStateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ContainerRepository", "GetContainerState", "*container_repositorypb.GetContainerStateRequest", v)
		}
	}
	var payload *containerrepository.GetContainerStatePayload
	{
		payload = NewGetContainerStatePayload(message)
	}
	return payload, nil
}

// EncodeSetContainerStateResponse encodes responses from the
// "ContainerRepository" service "SetContainerState" endpoint.
func EncodeSetContainerStateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoSetContainerStateResponse()
	return resp, nil
}

// DecodeSetContainerStateRequest decodes requests sent to
// "ContainerRepository" service "SetContainerState" endpoint.
func DecodeSetContainerStateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *container_repositorypb.SetContainerStateRequest
		ok      bool
	)
	{
		if message, ok = v.(*container_repositorypb.SetContainerStateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ContainerRepository", "SetContainerState", "*container_repositorypb.SetContainerStateRequest", v)
		}
	}
	var payload *containerrepository.SetContainerStatePayload
	{
		payload = NewSetContainerStatePayload(message)
	}
	return payload, nil
}
