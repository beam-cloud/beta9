// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ContainerRepository gRPC server
//
// Command:
// $ goa gen github.com/beam-cloud/beta9/pkg/repository/dsl -o proto/goa

package server

import (
	"context"

	containerrepository "github.com/beam-cloud/beta9/proto/goa/gen/container_repository"
	container_repositorypb "github.com/beam-cloud/beta9/proto/goa/gen/grpc/container_repository/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the container_repositorypb.ContainerRepositoryServer
// interface.
type Server struct {
	GetContainerStateH goagrpc.UnaryHandler
	SetContainerStateH goagrpc.UnaryHandler
	container_repositorypb.UnimplementedContainerRepositoryServer
}

// New instantiates the server struct with the ContainerRepository service
// endpoints.
func New(e *containerrepository.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		GetContainerStateH: NewGetContainerStateHandler(e.GetContainerState, uh),
		SetContainerStateH: NewSetContainerStateHandler(e.SetContainerState, uh),
	}
}

// NewGetContainerStateHandler creates a gRPC handler which serves the
// "ContainerRepository" service "GetContainerState" endpoint.
func NewGetContainerStateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetContainerStateRequest, EncodeGetContainerStateResponse)
	}
	return h
}

// GetContainerState implements the "GetContainerState" method in
// container_repositorypb.ContainerRepositoryServer interface.
func (s *Server) GetContainerState(ctx context.Context, message *container_repositorypb.GetContainerStateRequest) (*container_repositorypb.GetContainerStateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "GetContainerState")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ContainerRepository")
	resp, err := s.GetContainerStateH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*container_repositorypb.GetContainerStateResponse), nil
}

// NewSetContainerStateHandler creates a gRPC handler which serves the
// "ContainerRepository" service "SetContainerState" endpoint.
func NewSetContainerStateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSetContainerStateRequest, EncodeSetContainerStateResponse)
	}
	return h
}

// SetContainerState implements the "SetContainerState" method in
// container_repositorypb.ContainerRepositoryServer interface.
func (s *Server) SetContainerState(ctx context.Context, message *container_repositorypb.SetContainerStateRequest) (*container_repositorypb.SetContainerStateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "SetContainerState")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ContainerRepository")
	resp, err := s.SetContainerStateH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*container_repositorypb.SetContainerStateResponse), nil
}
