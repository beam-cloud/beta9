// Code generated with goa v3.19.1, DO NOT EDIT.
//
// ContainerRepository protocol buffer definition
//
// Command:
// $ goa gen github.com/beam-cloud/beta9/pkg/repository/dsl -o proto/goa

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: goagen_goa_container_repository.proto

package container_repositorypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContainerRepository_GetContainerState_FullMethodName = "/container_repository.ContainerRepository/GetContainerState"
	ContainerRepository_SetContainerState_FullMethodName = "/container_repository.ContainerRepository/SetContainerState"
)

// ContainerRepositoryClient is the client API for ContainerRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerRepositoryClient interface {
	// GetContainerState implements GetContainerState.
	GetContainerState(ctx context.Context, in *GetContainerStateRequest, opts ...grpc.CallOption) (*GetContainerStateResponse, error)
	// SetContainerState implements SetContainerState.
	SetContainerState(ctx context.Context, in *SetContainerStateRequest, opts ...grpc.CallOption) (*SetContainerStateResponse, error)
}

type containerRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerRepositoryClient(cc grpc.ClientConnInterface) ContainerRepositoryClient {
	return &containerRepositoryClient{cc}
}

func (c *containerRepositoryClient) GetContainerState(ctx context.Context, in *GetContainerStateRequest, opts ...grpc.CallOption) (*GetContainerStateResponse, error) {
	out := new(GetContainerStateResponse)
	err := c.cc.Invoke(ctx, ContainerRepository_GetContainerState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRepositoryClient) SetContainerState(ctx context.Context, in *SetContainerStateRequest, opts ...grpc.CallOption) (*SetContainerStateResponse, error) {
	out := new(SetContainerStateResponse)
	err := c.cc.Invoke(ctx, ContainerRepository_SetContainerState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerRepositoryServer is the server API for ContainerRepository service.
// All implementations must embed UnimplementedContainerRepositoryServer
// for forward compatibility
type ContainerRepositoryServer interface {
	// GetContainerState implements GetContainerState.
	GetContainerState(context.Context, *GetContainerStateRequest) (*GetContainerStateResponse, error)
	// SetContainerState implements SetContainerState.
	SetContainerState(context.Context, *SetContainerStateRequest) (*SetContainerStateResponse, error)
	mustEmbedUnimplementedContainerRepositoryServer()
}

// UnimplementedContainerRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedContainerRepositoryServer struct {
}

func (UnimplementedContainerRepositoryServer) GetContainerState(context.Context, *GetContainerStateRequest) (*GetContainerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerState not implemented")
}
func (UnimplementedContainerRepositoryServer) SetContainerState(context.Context, *SetContainerStateRequest) (*SetContainerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContainerState not implemented")
}
func (UnimplementedContainerRepositoryServer) mustEmbedUnimplementedContainerRepositoryServer() {}

// UnsafeContainerRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerRepositoryServer will
// result in compilation errors.
type UnsafeContainerRepositoryServer interface {
	mustEmbedUnimplementedContainerRepositoryServer()
}

func RegisterContainerRepositoryServer(s grpc.ServiceRegistrar, srv ContainerRepositoryServer) {
	s.RegisterService(&ContainerRepository_ServiceDesc, srv)
}

func _ContainerRepository_GetContainerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRepositoryServer).GetContainerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerRepository_GetContainerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRepositoryServer).GetContainerState(ctx, req.(*GetContainerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRepository_SetContainerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetContainerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRepositoryServer).SetContainerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerRepository_SetContainerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRepositoryServer).SetContainerState(ctx, req.(*SetContainerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerRepository_ServiceDesc is the grpc.ServiceDesc for ContainerRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "container_repository.ContainerRepository",
	HandlerType: (*ContainerRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContainerState",
			Handler:    _ContainerRepository_GetContainerState_Handler,
		},
		{
			MethodName: "SetContainerState",
			Handler:    _ContainerRepository_SetContainerState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goagen_goa_container_repository.proto",
}
