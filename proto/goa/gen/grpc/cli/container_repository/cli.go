// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ContainerRepository gRPC client CLI support package
//
// Command:
// $ goa gen github.com/beam-cloud/beta9/pkg/repository/dsl -o proto/goa

package cli

import (
	"flag"
	"fmt"
	"os"

	containerrepositoryc "github.com/beam-cloud/beta9/proto/goa/gen/grpc/container_repository/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `container-repository (get-container-state|set-container-state)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` container-repository get-container-state --message '{
      "containerId": "Facilis doloremque eum."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		containerRepositoryFlags = flag.NewFlagSet("container-repository", flag.ContinueOnError)

		containerRepositoryGetContainerStateFlags       = flag.NewFlagSet("get-container-state", flag.ExitOnError)
		containerRepositoryGetContainerStateMessageFlag = containerRepositoryGetContainerStateFlags.String("message", "", "")

		containerRepositorySetContainerStateFlags       = flag.NewFlagSet("set-container-state", flag.ExitOnError)
		containerRepositorySetContainerStateMessageFlag = containerRepositorySetContainerStateFlags.String("message", "", "")
	)
	containerRepositoryFlags.Usage = containerRepositoryUsage
	containerRepositoryGetContainerStateFlags.Usage = containerRepositoryGetContainerStateUsage
	containerRepositorySetContainerStateFlags.Usage = containerRepositorySetContainerStateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "container-repository":
			svcf = containerRepositoryFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "container-repository":
			switch epn {
			case "get-container-state":
				epf = containerRepositoryGetContainerStateFlags

			case "set-container-state":
				epf = containerRepositorySetContainerStateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "container-repository":
			c := containerrepositoryc.NewClient(cc, opts...)
			switch epn {
			case "get-container-state":
				endpoint = c.GetContainerState()
				data, err = containerrepositoryc.BuildGetContainerStatePayload(*containerRepositoryGetContainerStateMessageFlag)
			case "set-container-state":
				endpoint = c.SetContainerState()
				data, err = containerrepositoryc.BuildSetContainerStatePayload(*containerRepositorySetContainerStateMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
} // container-repositoryUsage displays the usage of the container-repository
// command and its subcommands.
func containerRepositoryUsage() {
	fmt.Fprintf(os.Stderr, `Service is the ContainerRepository service interface.
Usage:
    %[1]s [globalflags] container-repository COMMAND [flags]

COMMAND:
    get-container-state: GetContainerState implements GetContainerState.
    set-container-state: SetContainerState implements SetContainerState.

Additional help:
    %[1]s container-repository COMMAND --help
`, os.Args[0])
}
func containerRepositoryGetContainerStateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] container-repository get-container-state -message JSON

GetContainerState implements GetContainerState.
    -message JSON: 

Example:
    %[1]s container-repository get-container-state --message '{
      "containerId": "Facilis doloremque eum."
   }'
`, os.Args[0])
}

func containerRepositorySetContainerStateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] container-repository set-container-state -message JSON

SetContainerState implements SetContainerState.
    -message JSON: 

Example:
    %[1]s container-repository set-container-state --message '{
      "containerId": "Vitae reiciendis quo est necessitatibus quia veritatis.",
      "state": {}
   }'
`, os.Args[0])
}
