// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.25.1
// source: bot.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PopBotTaskRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StubId         string                 `protobuf:"bytes,1,opt,name=stub_id,json=stubId,proto3" json:"stub_id,omitempty"`
	SessionId      string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransitionName string                 `protobuf:"bytes,3,opt,name=transition_name,json=transitionName,proto3" json:"transition_name,omitempty"`
	TaskId         string                 `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PopBotTaskRequest) Reset() {
	*x = PopBotTaskRequest{}
	mi := &file_bot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PopBotTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopBotTaskRequest) ProtoMessage() {}

func (x *PopBotTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopBotTaskRequest.ProtoReflect.Descriptor instead.
func (*PopBotTaskRequest) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{0}
}

func (x *PopBotTaskRequest) GetStubId() string {
	if x != nil {
		return x.StubId
	}
	return ""
}

func (x *PopBotTaskRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PopBotTaskRequest) GetTransitionName() string {
	if x != nil {
		return x.TransitionName
	}
	return ""
}

func (x *PopBotTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type PopBotTaskResponse struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Ok            bool                                      `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Markers       map[string]*PopBotTaskResponse_MarkerList `protobuf:"bytes,2,rep,name=markers,proto3" json:"markers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PopBotTaskResponse) Reset() {
	*x = PopBotTaskResponse{}
	mi := &file_bot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PopBotTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopBotTaskResponse) ProtoMessage() {}

func (x *PopBotTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopBotTaskResponse.ProtoReflect.Descriptor instead.
func (*PopBotTaskResponse) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{1}
}

func (x *PopBotTaskResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *PopBotTaskResponse) GetMarkers() map[string]*PopBotTaskResponse_MarkerList {
	if x != nil {
		return x.Markers
	}
	return nil
}

type MarkerField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldName     string                 `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldValue    string                 `protobuf:"bytes,2,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkerField) Reset() {
	*x = MarkerField{}
	mi := &file_bot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkerField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkerField) ProtoMessage() {}

func (x *MarkerField) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkerField.ProtoReflect.Descriptor instead.
func (*MarkerField) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{2}
}

func (x *MarkerField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *MarkerField) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

type Marker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LocationName  string                 `protobuf:"bytes,1,opt,name=location_name,json=locationName,proto3" json:"location_name,omitempty"`
	Fields        []*MarkerField         `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	SourceTaskId  string                 `protobuf:"bytes,3,opt,name=source_task_id,json=sourceTaskId,proto3" json:"source_task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Marker) Reset() {
	*x = Marker{}
	mi := &file_bot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Marker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Marker) ProtoMessage() {}

func (x *Marker) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Marker.ProtoReflect.Descriptor instead.
func (*Marker) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{3}
}

func (x *Marker) GetLocationName() string {
	if x != nil {
		return x.LocationName
	}
	return ""
}

func (x *Marker) GetFields() []*MarkerField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Marker) GetSourceTaskId() string {
	if x != nil {
		return x.SourceTaskId
	}
	return ""
}

type PushBotMarkersRequest struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	StubId        string                                       `protobuf:"bytes,1,opt,name=stub_id,json=stubId,proto3" json:"stub_id,omitempty"`
	SessionId     string                                       `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Markers       map[string]*PushBotMarkersRequest_MarkerList `protobuf:"bytes,3,rep,name=markers,proto3" json:"markers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SourceTaskId  string                                       `protobuf:"bytes,5,opt,name=source_task_id,json=sourceTaskId,proto3" json:"source_task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushBotMarkersRequest) Reset() {
	*x = PushBotMarkersRequest{}
	mi := &file_bot_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushBotMarkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotMarkersRequest) ProtoMessage() {}

func (x *PushBotMarkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotMarkersRequest.ProtoReflect.Descriptor instead.
func (*PushBotMarkersRequest) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{4}
}

func (x *PushBotMarkersRequest) GetStubId() string {
	if x != nil {
		return x.StubId
	}
	return ""
}

func (x *PushBotMarkersRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PushBotMarkersRequest) GetMarkers() map[string]*PushBotMarkersRequest_MarkerList {
	if x != nil {
		return x.Markers
	}
	return nil
}

func (x *PushBotMarkersRequest) GetSourceTaskId() string {
	if x != nil {
		return x.SourceTaskId
	}
	return ""
}

type PushBotMarkersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushBotMarkersResponse) Reset() {
	*x = PushBotMarkersResponse{}
	mi := &file_bot_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushBotMarkersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotMarkersResponse) ProtoMessage() {}

func (x *PushBotMarkersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotMarkersResponse.ProtoReflect.Descriptor instead.
func (*PushBotMarkersResponse) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{5}
}

func (x *PushBotMarkersResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type PushBotEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StubId        string                 `protobuf:"bytes,1,opt,name=stub_id,json=stubId,proto3" json:"stub_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	EventType     string                 `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	EventValue    string                 `protobuf:"bytes,4,opt,name=event_value,json=eventValue,proto3" json:"event_value,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushBotEventRequest) Reset() {
	*x = PushBotEventRequest{}
	mi := &file_bot_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushBotEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotEventRequest) ProtoMessage() {}

func (x *PushBotEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotEventRequest.ProtoReflect.Descriptor instead.
func (*PushBotEventRequest) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{6}
}

func (x *PushBotEventRequest) GetStubId() string {
	if x != nil {
		return x.StubId
	}
	return ""
}

func (x *PushBotEventRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PushBotEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *PushBotEventRequest) GetEventValue() string {
	if x != nil {
		return x.EventValue
	}
	return ""
}

func (x *PushBotEventRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PushBotEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	EventId       string                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushBotEventResponse) Reset() {
	*x = PushBotEventResponse{}
	mi := &file_bot_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushBotEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotEventResponse) ProtoMessage() {}

func (x *PushBotEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotEventResponse.ProtoReflect.Descriptor instead.
func (*PushBotEventResponse) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{7}
}

func (x *PushBotEventResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *PushBotEventResponse) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type PushBotEventBlockingRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StubId         string                 `protobuf:"bytes,1,opt,name=stub_id,json=stubId,proto3" json:"stub_id,omitempty"`
	SessionId      string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	EventType      string                 `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	EventValue     string                 `protobuf:"bytes,4,opt,name=event_value,json=eventValue,proto3" json:"event_value,omitempty"`
	Metadata       map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TimeoutSeconds int32                  `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PushBotEventBlockingRequest) Reset() {
	*x = PushBotEventBlockingRequest{}
	mi := &file_bot_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushBotEventBlockingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotEventBlockingRequest) ProtoMessage() {}

func (x *PushBotEventBlockingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotEventBlockingRequest.ProtoReflect.Descriptor instead.
func (*PushBotEventBlockingRequest) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{8}
}

func (x *PushBotEventBlockingRequest) GetStubId() string {
	if x != nil {
		return x.StubId
	}
	return ""
}

func (x *PushBotEventBlockingRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PushBotEventBlockingRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *PushBotEventBlockingRequest) GetEventValue() string {
	if x != nil {
		return x.EventValue
	}
	return ""
}

func (x *PushBotEventBlockingRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PushBotEventBlockingRequest) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type PushBotEventBlockingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Event         *BotEvent              `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushBotEventBlockingResponse) Reset() {
	*x = PushBotEventBlockingResponse{}
	mi := &file_bot_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushBotEventBlockingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotEventBlockingResponse) ProtoMessage() {}

func (x *PushBotEventBlockingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotEventBlockingResponse.ProtoReflect.Descriptor instead.
func (*PushBotEventBlockingResponse) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{9}
}

func (x *PushBotEventBlockingResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *PushBotEventBlockingResponse) GetEvent() *BotEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type BotEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BotEvent) Reset() {
	*x = BotEvent{}
	mi := &file_bot_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotEvent) ProtoMessage() {}

func (x *BotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotEvent.ProtoReflect.Descriptor instead.
func (*BotEvent) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{10}
}

func (x *BotEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BotEvent) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BotEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PopBotTaskResponse_MarkerList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Markers       []*Marker              `protobuf:"bytes,1,rep,name=markers,proto3" json:"markers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PopBotTaskResponse_MarkerList) Reset() {
	*x = PopBotTaskResponse_MarkerList{}
	mi := &file_bot_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PopBotTaskResponse_MarkerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopBotTaskResponse_MarkerList) ProtoMessage() {}

func (x *PopBotTaskResponse_MarkerList) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopBotTaskResponse_MarkerList.ProtoReflect.Descriptor instead.
func (*PopBotTaskResponse_MarkerList) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{1, 1}
}

func (x *PopBotTaskResponse_MarkerList) GetMarkers() []*Marker {
	if x != nil {
		return x.Markers
	}
	return nil
}

type PushBotMarkersRequest_MarkerList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Markers       []*Marker              `protobuf:"bytes,4,rep,name=markers,proto3" json:"markers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushBotMarkersRequest_MarkerList) Reset() {
	*x = PushBotMarkersRequest_MarkerList{}
	mi := &file_bot_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushBotMarkersRequest_MarkerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotMarkersRequest_MarkerList) ProtoMessage() {}

func (x *PushBotMarkersRequest_MarkerList) ProtoReflect() protoreflect.Message {
	mi := &file_bot_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotMarkersRequest_MarkerList.ProtoReflect.Descriptor instead.
func (*PushBotMarkersRequest_MarkerList) Descriptor() ([]byte, []int) {
	return file_bot_proto_rawDescGZIP(), []int{4, 1}
}

func (x *PushBotMarkersRequest_MarkerList) GetMarkers() []*Marker {
	if x != nil {
		return x.Markers
	}
	return nil
}

var File_bot_proto protoreflect.FileDescriptor

var file_bot_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x62, 0x6f, 0x74,
	0x22, 0x8d, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x70, 0x42, 0x6f, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x75, 0x62, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0xf9, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x70, 0x42, 0x6f, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x50,
	0x6f, 0x70, 0x42, 0x6f, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x5e, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x50,
	0x6f, 0x70, 0x42, 0x6f, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x33, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x0b,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x06, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x74,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xd0, 0x02, 0x0a, 0x15, 0x50,
	0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x62, 0x6f, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x61, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x42, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x33, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x28, 0x0a,
	0x16, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x8e, 0x02, 0x0a, 0x13, 0x50, 0x75, 0x73, 0x68,
	0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x74, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x14, 0x50, 0x75, 0x73, 0x68,
	0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc7, 0x02, 0x0a, 0x1b,
	0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x74, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x75, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x1c, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x42, 0x6f, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x08, 0x42,
	0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xc0, 0x02, 0x0a, 0x0a, 0x42, 0x6f, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x50, 0x6f, 0x70, 0x42, 0x6f, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x70, 0x42, 0x6f,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62,
	0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x70, 0x42, 0x6f, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x50, 0x75, 0x73, 0x68, 0x42,
	0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x62, 0x6f, 0x74, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x42, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x42,
	0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x50,
	0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6f, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x62, 0x65, 0x74, 0x61, 0x39, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_bot_proto_rawDescOnce sync.Once
	file_bot_proto_rawDescData []byte
)

func file_bot_proto_rawDescGZIP() []byte {
	file_bot_proto_rawDescOnce.Do(func() {
		file_bot_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bot_proto_rawDesc), len(file_bot_proto_rawDesc)))
	})
	return file_bot_proto_rawDescData
}

var file_bot_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_bot_proto_goTypes = []any{
	(*PopBotTaskRequest)(nil),                // 0: bot.PopBotTaskRequest
	(*PopBotTaskResponse)(nil),               // 1: bot.PopBotTaskResponse
	(*MarkerField)(nil),                      // 2: bot.MarkerField
	(*Marker)(nil),                           // 3: bot.Marker
	(*PushBotMarkersRequest)(nil),            // 4: bot.PushBotMarkersRequest
	(*PushBotMarkersResponse)(nil),           // 5: bot.PushBotMarkersResponse
	(*PushBotEventRequest)(nil),              // 6: bot.PushBotEventRequest
	(*PushBotEventResponse)(nil),             // 7: bot.PushBotEventResponse
	(*PushBotEventBlockingRequest)(nil),      // 8: bot.PushBotEventBlockingRequest
	(*PushBotEventBlockingResponse)(nil),     // 9: bot.PushBotEventBlockingResponse
	(*BotEvent)(nil),                         // 10: bot.BotEvent
	nil,                                      // 11: bot.PopBotTaskResponse.MarkersEntry
	(*PopBotTaskResponse_MarkerList)(nil),    // 12: bot.PopBotTaskResponse.MarkerList
	nil,                                      // 13: bot.PushBotMarkersRequest.MarkersEntry
	(*PushBotMarkersRequest_MarkerList)(nil), // 14: bot.PushBotMarkersRequest.MarkerList
	nil,                                      // 15: bot.PushBotEventRequest.MetadataEntry
	nil,                                      // 16: bot.PushBotEventBlockingRequest.MetadataEntry
	nil,                                      // 17: bot.BotEvent.MetadataEntry
}
var file_bot_proto_depIdxs = []int32{
	11, // 0: bot.PopBotTaskResponse.markers:type_name -> bot.PopBotTaskResponse.MarkersEntry
	2,  // 1: bot.Marker.fields:type_name -> bot.MarkerField
	13, // 2: bot.PushBotMarkersRequest.markers:type_name -> bot.PushBotMarkersRequest.MarkersEntry
	15, // 3: bot.PushBotEventRequest.metadata:type_name -> bot.PushBotEventRequest.MetadataEntry
	16, // 4: bot.PushBotEventBlockingRequest.metadata:type_name -> bot.PushBotEventBlockingRequest.MetadataEntry
	10, // 5: bot.PushBotEventBlockingResponse.event:type_name -> bot.BotEvent
	17, // 6: bot.BotEvent.metadata:type_name -> bot.BotEvent.MetadataEntry
	12, // 7: bot.PopBotTaskResponse.MarkersEntry.value:type_name -> bot.PopBotTaskResponse.MarkerList
	3,  // 8: bot.PopBotTaskResponse.MarkerList.markers:type_name -> bot.Marker
	14, // 9: bot.PushBotMarkersRequest.MarkersEntry.value:type_name -> bot.PushBotMarkersRequest.MarkerList
	3,  // 10: bot.PushBotMarkersRequest.MarkerList.markers:type_name -> bot.Marker
	0,  // 11: bot.BotService.PopBotTask:input_type -> bot.PopBotTaskRequest
	4,  // 12: bot.BotService.PushBotMarkers:input_type -> bot.PushBotMarkersRequest
	6,  // 13: bot.BotService.PushBotEvent:input_type -> bot.PushBotEventRequest
	8,  // 14: bot.BotService.PushBotEventBlocking:input_type -> bot.PushBotEventBlockingRequest
	1,  // 15: bot.BotService.PopBotTask:output_type -> bot.PopBotTaskResponse
	5,  // 16: bot.BotService.PushBotMarkers:output_type -> bot.PushBotMarkersResponse
	7,  // 17: bot.BotService.PushBotEvent:output_type -> bot.PushBotEventResponse
	9,  // 18: bot.BotService.PushBotEventBlocking:output_type -> bot.PushBotEventBlockingResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_bot_proto_init() }
func file_bot_proto_init() {
	if File_bot_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bot_proto_rawDesc), len(file_bot_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bot_proto_goTypes,
		DependencyIndexes: file_bot_proto_depIdxs,
		MessageInfos:      file_bot_proto_msgTypes,
	}.Build()
	File_bot_proto = out.File
	file_bot_proto_goTypes = nil
	file_bot_proto_depIdxs = nil
}
