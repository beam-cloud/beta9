// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: worker.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunCKillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (x *RunCKillRequest) Reset() {
	*x = RunCKillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCKillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCKillRequest) ProtoMessage() {}

func (x *RunCKillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCKillRequest.ProtoReflect.Descriptor instead.
func (*RunCKillRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{0}
}

func (x *RunCKillRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type RunCKillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *RunCKillResponse) Reset() {
	*x = RunCKillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCKillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCKillResponse) ProtoMessage() {}

func (x *RunCKillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCKillResponse.ProtoReflect.Descriptor instead.
func (*RunCKillResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{1}
}

func (x *RunCKillResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type RunCExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Cmd         string   `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Env         []string `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty"`
}

func (x *RunCExecRequest) Reset() {
	*x = RunCExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCExecRequest) ProtoMessage() {}

func (x *RunCExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCExecRequest.ProtoReflect.Descriptor instead.
func (*RunCExecRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{2}
}

func (x *RunCExecRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCExecRequest) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *RunCExecRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

type RunCExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *RunCExecResponse) Reset() {
	*x = RunCExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCExecResponse) ProtoMessage() {}

func (x *RunCExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCExecResponse.ProtoReflect.Descriptor instead.
func (*RunCExecResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{3}
}

func (x *RunCExecResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type RunCStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (x *RunCStatusRequest) Reset() {
	*x = RunCStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCStatusRequest) ProtoMessage() {}

func (x *RunCStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCStatusRequest.ProtoReflect.Descriptor instead.
func (*RunCStatusRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{4}
}

func (x *RunCStatusRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type RunCStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Running bool `protobuf:"varint,1,opt,name=running,proto3" json:"running,omitempty"`
}

func (x *RunCStatusResponse) Reset() {
	*x = RunCStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCStatusResponse) ProtoMessage() {}

func (x *RunCStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCStatusResponse.ProtoReflect.Descriptor instead.
func (*RunCStatusResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{5}
}

func (x *RunCStatusResponse) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

type RunCStreamLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (x *RunCStreamLogsRequest) Reset() {
	*x = RunCStreamLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCStreamLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCStreamLogsRequest) ProtoMessage() {}

func (x *RunCStreamLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCStreamLogsRequest.ProtoReflect.Descriptor instead.
func (*RunCStreamLogsRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{6}
}

func (x *RunCStreamLogsRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type RunCLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *RunCLogEntry) Reset() {
	*x = RunCLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCLogEntry) ProtoMessage() {}

func (x *RunCLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCLogEntry.ProtoReflect.Descriptor instead.
func (*RunCLogEntry) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{7}
}

func (x *RunCLogEntry) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type RunCArchiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ImageId     string `protobuf:"bytes,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *RunCArchiveRequest) Reset() {
	*x = RunCArchiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCArchiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCArchiveRequest) ProtoMessage() {}

func (x *RunCArchiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCArchiveRequest.ProtoReflect.Descriptor instead.
func (*RunCArchiveRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{8}
}

func (x *RunCArchiveRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCArchiveRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type RunCArchiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done     bool   `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	Success  bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Progress int32  `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	ErrorMsg string `protobuf:"bytes,4,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *RunCArchiveResponse) Reset() {
	*x = RunCArchiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCArchiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCArchiveResponse) ProtoMessage() {}

func (x *RunCArchiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCArchiveResponse.ProtoReflect.Descriptor instead.
func (*RunCArchiveResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{9}
}

func (x *RunCArchiveResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *RunCArchiveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RunCArchiveResponse) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *RunCArchiveResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type RunCSandboxExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string            `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Cmd         string            `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Cwd         string            `protobuf:"bytes,3,opt,name=cwd,proto3" json:"cwd,omitempty"`
	Env         map[string]string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Interactive bool              `protobuf:"varint,5,opt,name=interactive,proto3" json:"interactive,omitempty"`
}

func (x *RunCSandboxExecRequest) Reset() {
	*x = RunCSandboxExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxExecRequest) ProtoMessage() {}

func (x *RunCSandboxExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxExecRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxExecRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{10}
}

func (x *RunCSandboxExecRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxExecRequest) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *RunCSandboxExecRequest) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *RunCSandboxExecRequest) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *RunCSandboxExecRequest) GetInteractive() bool {
	if x != nil {
		return x.Interactive
	}
	return false
}

type RunCSandboxExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	Pid      int32  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *RunCSandboxExecResponse) Reset() {
	*x = RunCSandboxExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxExecResponse) ProtoMessage() {}

func (x *RunCSandboxExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxExecResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxExecResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{11}
}

func (x *RunCSandboxExecResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxExecResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RunCSandboxExecResponse) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type RunCSandboxStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Pid         int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *RunCSandboxStatusRequest) Reset() {
	*x = RunCSandboxStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxStatusRequest) ProtoMessage() {}

func (x *RunCSandboxStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxStatusRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxStatusRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{12}
}

func (x *RunCSandboxStatusRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxStatusRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type RunCSandboxStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	Status   string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ExitCode int32  `protobuf:"varint,4,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *RunCSandboxStatusResponse) Reset() {
	*x = RunCSandboxStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxStatusResponse) ProtoMessage() {}

func (x *RunCSandboxStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxStatusResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxStatusResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{13}
}

func (x *RunCSandboxStatusResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxStatusResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RunCSandboxStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RunCSandboxStatusResponse) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type RunCSandboxStdoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Pid         int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *RunCSandboxStdoutRequest) Reset() {
	*x = RunCSandboxStdoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxStdoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxStdoutRequest) ProtoMessage() {}

func (x *RunCSandboxStdoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxStdoutRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxStdoutRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{14}
}

func (x *RunCSandboxStdoutRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxStdoutRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type RunCSandboxStdoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	Stdout   string `protobuf:"bytes,3,opt,name=stdout,proto3" json:"stdout,omitempty"`
}

func (x *RunCSandboxStdoutResponse) Reset() {
	*x = RunCSandboxStdoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxStdoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxStdoutResponse) ProtoMessage() {}

func (x *RunCSandboxStdoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxStdoutResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxStdoutResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{15}
}

func (x *RunCSandboxStdoutResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxStdoutResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RunCSandboxStdoutResponse) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

type RunCSandboxStderrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Pid         int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *RunCSandboxStderrRequest) Reset() {
	*x = RunCSandboxStderrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxStderrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxStderrRequest) ProtoMessage() {}

func (x *RunCSandboxStderrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxStderrRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxStderrRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{16}
}

func (x *RunCSandboxStderrRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxStderrRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type RunCSandboxStderrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	Stderr   string `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *RunCSandboxStderrResponse) Reset() {
	*x = RunCSandboxStderrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxStderrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxStderrResponse) ProtoMessage() {}

func (x *RunCSandboxStderrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxStderrResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxStderrResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{17}
}

func (x *RunCSandboxStderrResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxStderrResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RunCSandboxStderrResponse) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type RunCSandboxKillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Pid         int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *RunCSandboxKillRequest) Reset() {
	*x = RunCSandboxKillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxKillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxKillRequest) ProtoMessage() {}

func (x *RunCSandboxKillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxKillRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxKillRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{18}
}

func (x *RunCSandboxKillRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxKillRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type RunCSandboxKillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *RunCSandboxKillResponse) Reset() {
	*x = RunCSandboxKillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxKillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxKillResponse) ProtoMessage() {}

func (x *RunCSandboxKillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxKillResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxKillResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{19}
}

func (x *RunCSandboxKillResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxKillResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type RunCSandboxListFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId   string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerPath string `protobuf:"bytes,2,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
}

func (x *RunCSandboxListFilesRequest) Reset() {
	*x = RunCSandboxListFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxListFilesRequest) ProtoMessage() {}

func (x *RunCSandboxListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxListFilesRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxListFilesRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{20}
}

func (x *RunCSandboxListFilesRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxListFilesRequest) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

type RunCSandboxListFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool        `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string      `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	Files    []*FileInfo `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *RunCSandboxListFilesResponse) Reset() {
	*x = RunCSandboxListFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxListFilesResponse) ProtoMessage() {}

func (x *RunCSandboxListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxListFilesResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxListFilesResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{21}
}

func (x *RunCSandboxListFilesResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxListFilesResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RunCSandboxListFilesResponse) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type RunCSandboxDeleteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId   string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerPath string `protobuf:"bytes,2,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
}

func (x *RunCSandboxDeleteFileRequest) Reset() {
	*x = RunCSandboxDeleteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxDeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxDeleteFileRequest) ProtoMessage() {}

func (x *RunCSandboxDeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxDeleteFileRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxDeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{22}
}

func (x *RunCSandboxDeleteFileRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxDeleteFileRequest) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

type RunCSandboxDeleteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *RunCSandboxDeleteFileResponse) Reset() {
	*x = RunCSandboxDeleteFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxDeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxDeleteFileResponse) ProtoMessage() {}

func (x *RunCSandboxDeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxDeleteFileResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxDeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{23}
}

func (x *RunCSandboxDeleteFileResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxDeleteFileResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type RunCSandboxCreateDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId   string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerPath string `protobuf:"bytes,2,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
}

func (x *RunCSandboxCreateDirectoryRequest) Reset() {
	*x = RunCSandboxCreateDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxCreateDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxCreateDirectoryRequest) ProtoMessage() {}

func (x *RunCSandboxCreateDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxCreateDirectoryRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxCreateDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{24}
}

func (x *RunCSandboxCreateDirectoryRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxCreateDirectoryRequest) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

type RunCSandboxCreateDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *RunCSandboxCreateDirectoryResponse) Reset() {
	*x = RunCSandboxCreateDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxCreateDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxCreateDirectoryResponse) ProtoMessage() {}

func (x *RunCSandboxCreateDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxCreateDirectoryResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxCreateDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{25}
}

func (x *RunCSandboxCreateDirectoryResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxCreateDirectoryResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type RunCSandboxDeleteDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId   string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerPath string `protobuf:"bytes,2,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
}

func (x *RunCSandboxDeleteDirectoryRequest) Reset() {
	*x = RunCSandboxDeleteDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxDeleteDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxDeleteDirectoryRequest) ProtoMessage() {}

func (x *RunCSandboxDeleteDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxDeleteDirectoryRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxDeleteDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{26}
}

func (x *RunCSandboxDeleteDirectoryRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxDeleteDirectoryRequest) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

type RunCSandboxDeleteDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *RunCSandboxDeleteDirectoryResponse) Reset() {
	*x = RunCSandboxDeleteDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxDeleteDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxDeleteDirectoryResponse) ProtoMessage() {}

func (x *RunCSandboxDeleteDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxDeleteDirectoryResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxDeleteDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{27}
}

func (x *RunCSandboxDeleteDirectoryResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxDeleteDirectoryResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type RunCSandboxUploadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId   string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerPath string `protobuf:"bytes,2,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
	Data          []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Mode          int32  `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *RunCSandboxUploadFileRequest) Reset() {
	*x = RunCSandboxUploadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxUploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxUploadFileRequest) ProtoMessage() {}

func (x *RunCSandboxUploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxUploadFileRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxUploadFileRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{28}
}

func (x *RunCSandboxUploadFileRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxUploadFileRequest) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

func (x *RunCSandboxUploadFileRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RunCSandboxUploadFileRequest) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type RunCSandboxUploadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *RunCSandboxUploadFileResponse) Reset() {
	*x = RunCSandboxUploadFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxUploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxUploadFileResponse) ProtoMessage() {}

func (x *RunCSandboxUploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxUploadFileResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxUploadFileResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{29}
}

func (x *RunCSandboxUploadFileResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxUploadFileResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type RunCSandboxDownloadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId   string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerPath string `protobuf:"bytes,2,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
}

func (x *RunCSandboxDownloadFileRequest) Reset() {
	*x = RunCSandboxDownloadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxDownloadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxDownloadFileRequest) ProtoMessage() {}

func (x *RunCSandboxDownloadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxDownloadFileRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxDownloadFileRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{30}
}

func (x *RunCSandboxDownloadFileRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxDownloadFileRequest) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

type RunCSandboxDownloadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RunCSandboxDownloadFileResponse) Reset() {
	*x = RunCSandboxDownloadFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxDownloadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxDownloadFileResponse) ProtoMessage() {}

func (x *RunCSandboxDownloadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxDownloadFileResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxDownloadFileResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{31}
}

func (x *RunCSandboxDownloadFileResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxDownloadFileResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RunCSandboxDownloadFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RunCSandboxExposePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Port        int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *RunCSandboxExposePortRequest) Reset() {
	*x = RunCSandboxExposePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxExposePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxExposePortRequest) ProtoMessage() {}

func (x *RunCSandboxExposePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxExposePortRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxExposePortRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{32}
}

func (x *RunCSandboxExposePortRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxExposePortRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RunCSandboxExposePortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *RunCSandboxExposePortResponse) Reset() {
	*x = RunCSandboxExposePortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxExposePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxExposePortResponse) ProtoMessage() {}

func (x *RunCSandboxExposePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxExposePortResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxExposePortResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{33}
}

func (x *RunCSandboxExposePortResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxExposePortResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type RunCSandboxStatFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId   string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerPath string `protobuf:"bytes,2,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
}

func (x *RunCSandboxStatFileRequest) Reset() {
	*x = RunCSandboxStatFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxStatFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxStatFileRequest) ProtoMessage() {}

func (x *RunCSandboxStatFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxStatFileRequest.ProtoReflect.Descriptor instead.
func (*RunCSandboxStatFileRequest) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{34}
}

func (x *RunCSandboxStatFileRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunCSandboxStatFileRequest) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

type RunCSandboxStatFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool      `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMsg string    `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	FileInfo *FileInfo `protobuf:"bytes,3,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
}

func (x *RunCSandboxStatFileResponse) Reset() {
	*x = RunCSandboxStatFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCSandboxStatFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCSandboxStatFileResponse) ProtoMessage() {}

func (x *RunCSandboxStatFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCSandboxStatFileResponse.ProtoReflect.Descriptor instead.
func (*RunCSandboxStatFileResponse) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{35}
}

func (x *RunCSandboxStatFileResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunCSandboxStatFileResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RunCSandboxStatFileResponse) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

var File_worker_proto protoreflect.FileDescriptor

var file_worker_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x72, 0x75, 0x6e, 0x63, 0x1a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x34, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x43, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x43, 0x4b, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x58, 0x0a, 0x0f, 0x52, 0x75,
	0x6e, 0x43, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x6e, 0x76, 0x22, 0x22, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x43, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x36, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x43,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2e, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0x3a, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x0c,
	0x52, 0x75, 0x6e, 0x43, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x52,
	0x0a, 0x12, 0x52, 0x75, 0x6e, 0x43, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x7c, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x43, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x22, 0xf2, 0x01, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x77, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x36, 0x0a,
	0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22,
	0x4f, 0x0a, 0x18, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x22, 0x7d, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x4f, 0x0a, 0x18, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x22, 0x60, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f,
	0x75, 0x74, 0x22, 0x4f, 0x0a, 0x18, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0x4d, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x67, 0x0a, 0x1b,
	0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x22, 0x72, 0x0a, 0x1c, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x1c, 0x52, 0x75, 0x6e,
	0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x4c, 0x0a, 0x1d, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x22, 0x6d, 0x0a, 0x21, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x51, 0x0a, 0x22, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x22, 0x6d, 0x0a, 0x21, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x51, 0x0a, 0x22, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x90, 0x01, 0x0a, 0x1c, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x1d, 0x52, 0x75, 0x6e, 0x43,
	0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x6a, 0x0a, 0x1e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x62, 0x0a, 0x1f, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x1c, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x4c, 0x0a,
	0x1d, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x66, 0x0a, 0x1a, 0x52,
	0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x78, 0x0a, 0x1b, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x2c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xa8, 0x0d,
	0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x08, 0x52, 0x75, 0x6e, 0x43, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x63,
	0x2e, 0x52, 0x75, 0x6e, 0x43, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x4b, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x52, 0x75,
	0x6e, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x08, 0x52, 0x75, 0x6e, 0x43, 0x45, 0x78, 0x65, 0x63, 0x12, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x63,
	0x2e, 0x52, 0x75, 0x6e, 0x43, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x52, 0x75,
	0x6e, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x72,
	0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x63,
	0x2e, 0x52, 0x75, 0x6e, 0x43, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x46, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x43, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x75, 0x6e,
	0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x11, 0x52, 0x75, 0x6e,
	0x43, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x12, 0x1c, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43,
	0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x52,
	0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x12, 0x1e, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1e, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x64, 0x65, 0x72,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x64, 0x65, 0x72,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x52,
	0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x1c,
	0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72,
	0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4b,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x14, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e,
	0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x15, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52,
	0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x75,
	0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x2e,
	0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13,
	0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e,
	0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x52, 0x75,
	0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52,
	0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71,
	0x0a, 0x1a, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x72,
	0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e,
	0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x71, 0x0a, 0x1a, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x27, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x2e,
	0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x72, 0x75, 0x6e, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x53, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x65, 0x74, 0x61, 0x39, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_worker_proto_rawDescOnce sync.Once
	file_worker_proto_rawDescData = file_worker_proto_rawDesc
)

func file_worker_proto_rawDescGZIP() []byte {
	file_worker_proto_rawDescOnce.Do(func() {
		file_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_worker_proto_rawDescData)
	})
	return file_worker_proto_rawDescData
}

var file_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_worker_proto_goTypes = []interface{}{
	(*RunCKillRequest)(nil),                    // 0: runc.RunCKillRequest
	(*RunCKillResponse)(nil),                   // 1: runc.RunCKillResponse
	(*RunCExecRequest)(nil),                    // 2: runc.RunCExecRequest
	(*RunCExecResponse)(nil),                   // 3: runc.RunCExecResponse
	(*RunCStatusRequest)(nil),                  // 4: runc.RunCStatusRequest
	(*RunCStatusResponse)(nil),                 // 5: runc.RunCStatusResponse
	(*RunCStreamLogsRequest)(nil),              // 6: runc.RunCStreamLogsRequest
	(*RunCLogEntry)(nil),                       // 7: runc.RunCLogEntry
	(*RunCArchiveRequest)(nil),                 // 8: runc.RunCArchiveRequest
	(*RunCArchiveResponse)(nil),                // 9: runc.RunCArchiveResponse
	(*RunCSandboxExecRequest)(nil),             // 10: runc.RunCSandboxExecRequest
	(*RunCSandboxExecResponse)(nil),            // 11: runc.RunCSandboxExecResponse
	(*RunCSandboxStatusRequest)(nil),           // 12: runc.RunCSandboxStatusRequest
	(*RunCSandboxStatusResponse)(nil),          // 13: runc.RunCSandboxStatusResponse
	(*RunCSandboxStdoutRequest)(nil),           // 14: runc.RunCSandboxStdoutRequest
	(*RunCSandboxStdoutResponse)(nil),          // 15: runc.RunCSandboxStdoutResponse
	(*RunCSandboxStderrRequest)(nil),           // 16: runc.RunCSandboxStderrRequest
	(*RunCSandboxStderrResponse)(nil),          // 17: runc.RunCSandboxStderrResponse
	(*RunCSandboxKillRequest)(nil),             // 18: runc.RunCSandboxKillRequest
	(*RunCSandboxKillResponse)(nil),            // 19: runc.RunCSandboxKillResponse
	(*RunCSandboxListFilesRequest)(nil),        // 20: runc.RunCSandboxListFilesRequest
	(*RunCSandboxListFilesResponse)(nil),       // 21: runc.RunCSandboxListFilesResponse
	(*RunCSandboxDeleteFileRequest)(nil),       // 22: runc.RunCSandboxDeleteFileRequest
	(*RunCSandboxDeleteFileResponse)(nil),      // 23: runc.RunCSandboxDeleteFileResponse
	(*RunCSandboxCreateDirectoryRequest)(nil),  // 24: runc.RunCSandboxCreateDirectoryRequest
	(*RunCSandboxCreateDirectoryResponse)(nil), // 25: runc.RunCSandboxCreateDirectoryResponse
	(*RunCSandboxDeleteDirectoryRequest)(nil),  // 26: runc.RunCSandboxDeleteDirectoryRequest
	(*RunCSandboxDeleteDirectoryResponse)(nil), // 27: runc.RunCSandboxDeleteDirectoryResponse
	(*RunCSandboxUploadFileRequest)(nil),       // 28: runc.RunCSandboxUploadFileRequest
	(*RunCSandboxUploadFileResponse)(nil),      // 29: runc.RunCSandboxUploadFileResponse
	(*RunCSandboxDownloadFileRequest)(nil),     // 30: runc.RunCSandboxDownloadFileRequest
	(*RunCSandboxDownloadFileResponse)(nil),    // 31: runc.RunCSandboxDownloadFileResponse
	(*RunCSandboxExposePortRequest)(nil),       // 32: runc.RunCSandboxExposePortRequest
	(*RunCSandboxExposePortResponse)(nil),      // 33: runc.RunCSandboxExposePortResponse
	(*RunCSandboxStatFileRequest)(nil),         // 34: runc.RunCSandboxStatFileRequest
	(*RunCSandboxStatFileResponse)(nil),        // 35: runc.RunCSandboxStatFileResponse
	nil,                                        // 36: runc.RunCSandboxExecRequest.EnvEntry
	(*FileInfo)(nil),                           // 37: types.FileInfo
	(*SyncContainerWorkspaceRequest)(nil),      // 38: gateway.SyncContainerWorkspaceRequest
	(*SyncContainerWorkspaceResponse)(nil),     // 39: gateway.SyncContainerWorkspaceResponse
}
var file_worker_proto_depIdxs = []int32{
	36, // 0: runc.RunCSandboxExecRequest.env:type_name -> runc.RunCSandboxExecRequest.EnvEntry
	37, // 1: runc.RunCSandboxListFilesResponse.files:type_name -> types.FileInfo
	37, // 2: runc.RunCSandboxStatFileResponse.file_info:type_name -> types.FileInfo
	0,  // 3: runc.RunCService.RunCKill:input_type -> runc.RunCKillRequest
	4,  // 4: runc.RunCService.RunCStatus:input_type -> runc.RunCStatusRequest
	2,  // 5: runc.RunCService.RunCExec:input_type -> runc.RunCExecRequest
	6,  // 6: runc.RunCService.RunCStreamLogs:input_type -> runc.RunCStreamLogsRequest
	8,  // 7: runc.RunCService.RunCArchive:input_type -> runc.RunCArchiveRequest
	38, // 8: runc.RunCService.RunCSyncWorkspace:input_type -> gateway.SyncContainerWorkspaceRequest
	10, // 9: runc.RunCService.RunCSandboxExec:input_type -> runc.RunCSandboxExecRequest
	12, // 10: runc.RunCService.RunCSandboxStatus:input_type -> runc.RunCSandboxStatusRequest
	14, // 11: runc.RunCService.RunCSandboxStdout:input_type -> runc.RunCSandboxStdoutRequest
	16, // 12: runc.RunCService.RunCSandboxStderr:input_type -> runc.RunCSandboxStderrRequest
	18, // 13: runc.RunCService.RunCSandboxKill:input_type -> runc.RunCSandboxKillRequest
	20, // 14: runc.RunCService.RunCSandboxListFiles:input_type -> runc.RunCSandboxListFilesRequest
	28, // 15: runc.RunCService.RunCSandboxUploadFile:input_type -> runc.RunCSandboxUploadFileRequest
	30, // 16: runc.RunCService.RunCSandboxDownloadFile:input_type -> runc.RunCSandboxDownloadFileRequest
	34, // 17: runc.RunCService.RunCSandboxStatFile:input_type -> runc.RunCSandboxStatFileRequest
	22, // 18: runc.RunCService.RunCSandboxDeleteFile:input_type -> runc.RunCSandboxDeleteFileRequest
	24, // 19: runc.RunCService.RunCSandboxCreateDirectory:input_type -> runc.RunCSandboxCreateDirectoryRequest
	26, // 20: runc.RunCService.RunCSandboxDeleteDirectory:input_type -> runc.RunCSandboxDeleteDirectoryRequest
	32, // 21: runc.RunCService.RunCSandboxExposePort:input_type -> runc.RunCSandboxExposePortRequest
	1,  // 22: runc.RunCService.RunCKill:output_type -> runc.RunCKillResponse
	5,  // 23: runc.RunCService.RunCStatus:output_type -> runc.RunCStatusResponse
	3,  // 24: runc.RunCService.RunCExec:output_type -> runc.RunCExecResponse
	7,  // 25: runc.RunCService.RunCStreamLogs:output_type -> runc.RunCLogEntry
	9,  // 26: runc.RunCService.RunCArchive:output_type -> runc.RunCArchiveResponse
	39, // 27: runc.RunCService.RunCSyncWorkspace:output_type -> gateway.SyncContainerWorkspaceResponse
	11, // 28: runc.RunCService.RunCSandboxExec:output_type -> runc.RunCSandboxExecResponse
	13, // 29: runc.RunCService.RunCSandboxStatus:output_type -> runc.RunCSandboxStatusResponse
	15, // 30: runc.RunCService.RunCSandboxStdout:output_type -> runc.RunCSandboxStdoutResponse
	17, // 31: runc.RunCService.RunCSandboxStderr:output_type -> runc.RunCSandboxStderrResponse
	19, // 32: runc.RunCService.RunCSandboxKill:output_type -> runc.RunCSandboxKillResponse
	21, // 33: runc.RunCService.RunCSandboxListFiles:output_type -> runc.RunCSandboxListFilesResponse
	29, // 34: runc.RunCService.RunCSandboxUploadFile:output_type -> runc.RunCSandboxUploadFileResponse
	31, // 35: runc.RunCService.RunCSandboxDownloadFile:output_type -> runc.RunCSandboxDownloadFileResponse
	35, // 36: runc.RunCService.RunCSandboxStatFile:output_type -> runc.RunCSandboxStatFileResponse
	23, // 37: runc.RunCService.RunCSandboxDeleteFile:output_type -> runc.RunCSandboxDeleteFileResponse
	25, // 38: runc.RunCService.RunCSandboxCreateDirectory:output_type -> runc.RunCSandboxCreateDirectoryResponse
	27, // 39: runc.RunCService.RunCSandboxDeleteDirectory:output_type -> runc.RunCSandboxDeleteDirectoryResponse
	33, // 40: runc.RunCService.RunCSandboxExposePort:output_type -> runc.RunCSandboxExposePortResponse
	22, // [22:41] is the sub-list for method output_type
	3,  // [3:22] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_worker_proto_init() }
func file_worker_proto_init() {
	if File_worker_proto != nil {
		return
	}
	file_gateway_proto_init()
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCKillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCKillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCStreamLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCArchiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCArchiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxStdoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxStdoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxStderrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxStderrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxKillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxKillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxListFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxListFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxDeleteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxDeleteFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxCreateDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxCreateDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxDeleteDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxDeleteDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxUploadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxUploadFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxDownloadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxDownloadFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxExposePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxExposePortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxStatFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCSandboxStatFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_worker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_worker_proto_goTypes,
		DependencyIndexes: file_worker_proto_depIdxs,
		MessageInfos:      file_worker_proto_msgTypes,
	}.Build()
	File_worker_proto = out.File
	file_worker_proto_rawDesc = nil
	file_worker_proto_goTypes = nil
	file_worker_proto_depIdxs = nil
}
