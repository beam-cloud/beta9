// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: worker.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RunCService_RunCKill_FullMethodName = "/runc.RunCService/RunCKill"
)

// RunCServiceClient is the client API for RunCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunCServiceClient interface {
	RunCKill(ctx context.Context, in *RunCKillRequest, opts ...grpc.CallOption) (*RunCKillResponse, error)
}

type runCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunCServiceClient(cc grpc.ClientConnInterface) RunCServiceClient {
	return &runCServiceClient{cc}
}

func (c *runCServiceClient) RunCKill(ctx context.Context, in *RunCKillRequest, opts ...grpc.CallOption) (*RunCKillResponse, error) {
	out := new(RunCKillResponse)
	err := c.cc.Invoke(ctx, RunCService_RunCKill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunCServiceServer is the server API for RunCService service.
// All implementations must embed UnimplementedRunCServiceServer
// for forward compatibility
type RunCServiceServer interface {
	RunCKill(context.Context, *RunCKillRequest) (*RunCKillResponse, error)
	mustEmbedUnimplementedRunCServiceServer()
}

// UnimplementedRunCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRunCServiceServer struct {
}

func (UnimplementedRunCServiceServer) RunCKill(context.Context, *RunCKillRequest) (*RunCKillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCKill not implemented")
}
func (UnimplementedRunCServiceServer) mustEmbedUnimplementedRunCServiceServer() {}

// UnsafeRunCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunCServiceServer will
// result in compilation errors.
type UnsafeRunCServiceServer interface {
	mustEmbedUnimplementedRunCServiceServer()
}

func RegisterRunCServiceServer(s grpc.ServiceRegistrar, srv RunCServiceServer) {
	s.RegisterService(&RunCService_ServiceDesc, srv)
}

func _RunCService_RunCKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCServiceServer).RunCKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunCService_RunCKill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCServiceServer).RunCKill(ctx, req.(*RunCKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunCService_ServiceDesc is the grpc.ServiceDesc for RunCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runc.RunCService",
	HandlerType: (*RunCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunCKill",
			Handler:    _RunCService_RunCKill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker.proto",
}
