// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: taskqueue.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskQueueService_TaskQueuePut_FullMethodName            = "/taskqueue.TaskQueueService/TaskQueuePut"
	TaskQueueService_TaskQueuePop_FullMethodName            = "/taskqueue.TaskQueueService/TaskQueuePop"
	TaskQueueService_TaskQueueMonitor_FullMethodName        = "/taskqueue.TaskQueueService/TaskQueueMonitor"
	TaskQueueService_TaskQueueComplete_FullMethodName       = "/taskqueue.TaskQueueService/TaskQueueComplete"
	TaskQueueService_TaskQueueLength_FullMethodName         = "/taskqueue.TaskQueueService/TaskQueueLength"
	TaskQueueService_StartTaskQueueServe_FullMethodName     = "/taskqueue.TaskQueueService/StartTaskQueueServe"
	TaskQueueService_StopTaskQueueServe_FullMethodName      = "/taskqueue.TaskQueueService/StopTaskQueueServe"
	TaskQueueService_TaskQueueServeKeepAlive_FullMethodName = "/taskqueue.TaskQueueService/TaskQueueServeKeepAlive"
)

// TaskQueueServiceClient is the client API for TaskQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskQueueServiceClient interface {
	TaskQueuePut(ctx context.Context, in *TaskQueuePutRequest, opts ...grpc.CallOption) (*TaskQueuePutResponse, error)
	TaskQueuePop(ctx context.Context, in *TaskQueuePopRequest, opts ...grpc.CallOption) (*TaskQueuePopResponse, error)
	TaskQueueMonitor(ctx context.Context, in *TaskQueueMonitorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskQueueMonitorResponse], error)
	TaskQueueComplete(ctx context.Context, in *TaskQueueCompleteRequest, opts ...grpc.CallOption) (*TaskQueueCompleteResponse, error)
	TaskQueueLength(ctx context.Context, in *TaskQueueLengthRequest, opts ...grpc.CallOption) (*TaskQueueLengthResponse, error)
	StartTaskQueueServe(ctx context.Context, in *StartTaskQueueServeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StartTaskQueueServeResponse], error)
	StopTaskQueueServe(ctx context.Context, in *StopTaskQueueServeRequest, opts ...grpc.CallOption) (*StopTaskQueueServeResponse, error)
	TaskQueueServeKeepAlive(ctx context.Context, in *TaskQueueServeKeepAliveRequest, opts ...grpc.CallOption) (*TaskQueueServeKeepAliveResponse, error)
}

type taskQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskQueueServiceClient(cc grpc.ClientConnInterface) TaskQueueServiceClient {
	return &taskQueueServiceClient{cc}
}

func (c *taskQueueServiceClient) TaskQueuePut(ctx context.Context, in *TaskQueuePutRequest, opts ...grpc.CallOption) (*TaskQueuePutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskQueuePutResponse)
	err := c.cc.Invoke(ctx, TaskQueueService_TaskQueuePut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueServiceClient) TaskQueuePop(ctx context.Context, in *TaskQueuePopRequest, opts ...grpc.CallOption) (*TaskQueuePopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskQueuePopResponse)
	err := c.cc.Invoke(ctx, TaskQueueService_TaskQueuePop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueServiceClient) TaskQueueMonitor(ctx context.Context, in *TaskQueueMonitorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskQueueMonitorResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskQueueService_ServiceDesc.Streams[0], TaskQueueService_TaskQueueMonitor_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskQueueMonitorRequest, TaskQueueMonitorResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueueService_TaskQueueMonitorClient = grpc.ServerStreamingClient[TaskQueueMonitorResponse]

func (c *taskQueueServiceClient) TaskQueueComplete(ctx context.Context, in *TaskQueueCompleteRequest, opts ...grpc.CallOption) (*TaskQueueCompleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskQueueCompleteResponse)
	err := c.cc.Invoke(ctx, TaskQueueService_TaskQueueComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueServiceClient) TaskQueueLength(ctx context.Context, in *TaskQueueLengthRequest, opts ...grpc.CallOption) (*TaskQueueLengthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskQueueLengthResponse)
	err := c.cc.Invoke(ctx, TaskQueueService_TaskQueueLength_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueServiceClient) StartTaskQueueServe(ctx context.Context, in *StartTaskQueueServeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StartTaskQueueServeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskQueueService_ServiceDesc.Streams[1], TaskQueueService_StartTaskQueueServe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StartTaskQueueServeRequest, StartTaskQueueServeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueueService_StartTaskQueueServeClient = grpc.ServerStreamingClient[StartTaskQueueServeResponse]

func (c *taskQueueServiceClient) StopTaskQueueServe(ctx context.Context, in *StopTaskQueueServeRequest, opts ...grpc.CallOption) (*StopTaskQueueServeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopTaskQueueServeResponse)
	err := c.cc.Invoke(ctx, TaskQueueService_StopTaskQueueServe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueServiceClient) TaskQueueServeKeepAlive(ctx context.Context, in *TaskQueueServeKeepAliveRequest, opts ...grpc.CallOption) (*TaskQueueServeKeepAliveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskQueueServeKeepAliveResponse)
	err := c.cc.Invoke(ctx, TaskQueueService_TaskQueueServeKeepAlive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskQueueServiceServer is the server API for TaskQueueService service.
// All implementations must embed UnimplementedTaskQueueServiceServer
// for forward compatibility.
type TaskQueueServiceServer interface {
	TaskQueuePut(context.Context, *TaskQueuePutRequest) (*TaskQueuePutResponse, error)
	TaskQueuePop(context.Context, *TaskQueuePopRequest) (*TaskQueuePopResponse, error)
	TaskQueueMonitor(*TaskQueueMonitorRequest, grpc.ServerStreamingServer[TaskQueueMonitorResponse]) error
	TaskQueueComplete(context.Context, *TaskQueueCompleteRequest) (*TaskQueueCompleteResponse, error)
	TaskQueueLength(context.Context, *TaskQueueLengthRequest) (*TaskQueueLengthResponse, error)
	StartTaskQueueServe(*StartTaskQueueServeRequest, grpc.ServerStreamingServer[StartTaskQueueServeResponse]) error
	StopTaskQueueServe(context.Context, *StopTaskQueueServeRequest) (*StopTaskQueueServeResponse, error)
	TaskQueueServeKeepAlive(context.Context, *TaskQueueServeKeepAliveRequest) (*TaskQueueServeKeepAliveResponse, error)
	mustEmbedUnimplementedTaskQueueServiceServer()
}

// UnimplementedTaskQueueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskQueueServiceServer struct{}

func (UnimplementedTaskQueueServiceServer) TaskQueuePut(context.Context, *TaskQueuePutRequest) (*TaskQueuePutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskQueuePut not implemented")
}
func (UnimplementedTaskQueueServiceServer) TaskQueuePop(context.Context, *TaskQueuePopRequest) (*TaskQueuePopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskQueuePop not implemented")
}
func (UnimplementedTaskQueueServiceServer) TaskQueueMonitor(*TaskQueueMonitorRequest, grpc.ServerStreamingServer[TaskQueueMonitorResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TaskQueueMonitor not implemented")
}
func (UnimplementedTaskQueueServiceServer) TaskQueueComplete(context.Context, *TaskQueueCompleteRequest) (*TaskQueueCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskQueueComplete not implemented")
}
func (UnimplementedTaskQueueServiceServer) TaskQueueLength(context.Context, *TaskQueueLengthRequest) (*TaskQueueLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskQueueLength not implemented")
}
func (UnimplementedTaskQueueServiceServer) StartTaskQueueServe(*StartTaskQueueServeRequest, grpc.ServerStreamingServer[StartTaskQueueServeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StartTaskQueueServe not implemented")
}
func (UnimplementedTaskQueueServiceServer) StopTaskQueueServe(context.Context, *StopTaskQueueServeRequest) (*StopTaskQueueServeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTaskQueueServe not implemented")
}
func (UnimplementedTaskQueueServiceServer) TaskQueueServeKeepAlive(context.Context, *TaskQueueServeKeepAliveRequest) (*TaskQueueServeKeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskQueueServeKeepAlive not implemented")
}
func (UnimplementedTaskQueueServiceServer) mustEmbedUnimplementedTaskQueueServiceServer() {}
func (UnimplementedTaskQueueServiceServer) testEmbeddedByValue()                          {}

// UnsafeTaskQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskQueueServiceServer will
// result in compilation errors.
type UnsafeTaskQueueServiceServer interface {
	mustEmbedUnimplementedTaskQueueServiceServer()
}

func RegisterTaskQueueServiceServer(s grpc.ServiceRegistrar, srv TaskQueueServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskQueueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskQueueService_ServiceDesc, srv)
}

func _TaskQueueService_TaskQueuePut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueuePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServiceServer).TaskQueuePut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueueService_TaskQueuePut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServiceServer).TaskQueuePut(ctx, req.(*TaskQueuePutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueueService_TaskQueuePop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueuePopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServiceServer).TaskQueuePop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueueService_TaskQueuePop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServiceServer).TaskQueuePop(ctx, req.(*TaskQueuePopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueueService_TaskQueueMonitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskQueueMonitorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskQueueServiceServer).TaskQueueMonitor(m, &grpc.GenericServerStream[TaskQueueMonitorRequest, TaskQueueMonitorResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueueService_TaskQueueMonitorServer = grpc.ServerStreamingServer[TaskQueueMonitorResponse]

func _TaskQueueService_TaskQueueComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueueCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServiceServer).TaskQueueComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueueService_TaskQueueComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServiceServer).TaskQueueComplete(ctx, req.(*TaskQueueCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueueService_TaskQueueLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueueLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServiceServer).TaskQueueLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueueService_TaskQueueLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServiceServer).TaskQueueLength(ctx, req.(*TaskQueueLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueueService_StartTaskQueueServe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartTaskQueueServeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskQueueServiceServer).StartTaskQueueServe(m, &grpc.GenericServerStream[StartTaskQueueServeRequest, StartTaskQueueServeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskQueueService_StartTaskQueueServeServer = grpc.ServerStreamingServer[StartTaskQueueServeResponse]

func _TaskQueueService_StopTaskQueueServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTaskQueueServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServiceServer).StopTaskQueueServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueueService_StopTaskQueueServe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServiceServer).StopTaskQueueServe(ctx, req.(*StopTaskQueueServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueueService_TaskQueueServeKeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueueServeKeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServiceServer).TaskQueueServeKeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueueService_TaskQueueServeKeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServiceServer).TaskQueueServeKeepAlive(ctx, req.(*TaskQueueServeKeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskQueueService_ServiceDesc is the grpc.ServiceDesc for TaskQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskqueue.TaskQueueService",
	HandlerType: (*TaskQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskQueuePut",
			Handler:    _TaskQueueService_TaskQueuePut_Handler,
		},
		{
			MethodName: "TaskQueuePop",
			Handler:    _TaskQueueService_TaskQueuePop_Handler,
		},
		{
			MethodName: "TaskQueueComplete",
			Handler:    _TaskQueueService_TaskQueueComplete_Handler,
		},
		{
			MethodName: "TaskQueueLength",
			Handler:    _TaskQueueService_TaskQueueLength_Handler,
		},
		{
			MethodName: "StopTaskQueueServe",
			Handler:    _TaskQueueService_StopTaskQueueServe_Handler,
		},
		{
			MethodName: "TaskQueueServeKeepAlive",
			Handler:    _TaskQueueService_TaskQueueServeKeepAlive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaskQueueMonitor",
			Handler:       _TaskQueueService_TaskQueueMonitor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartTaskQueueServe",
			Handler:       _TaskQueueService_StartTaskQueueServe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "taskqueue.proto",
}
