// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pod.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PodService_RunPod_FullMethodName = "/pod.PodService/RunPod"
)

// PodServiceClient is the client API for PodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodServiceClient interface {
	RunPod(ctx context.Context, in *RunPodRequest, opts ...grpc.CallOption) (*RunPodResponse, error)
}

type podServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPodServiceClient(cc grpc.ClientConnInterface) PodServiceClient {
	return &podServiceClient{cc}
}

func (c *podServiceClient) RunPod(ctx context.Context, in *RunPodRequest, opts ...grpc.CallOption) (*RunPodResponse, error) {
	out := new(RunPodResponse)
	err := c.cc.Invoke(ctx, PodService_RunPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodServiceServer is the server API for PodService service.
// All implementations must embed UnimplementedPodServiceServer
// for forward compatibility
type PodServiceServer interface {
	RunPod(context.Context, *RunPodRequest) (*RunPodResponse, error)
	mustEmbedUnimplementedPodServiceServer()
}

// UnimplementedPodServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPodServiceServer struct {
}

func (UnimplementedPodServiceServer) RunPod(context.Context, *RunPodRequest) (*RunPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPod not implemented")
}
func (UnimplementedPodServiceServer) mustEmbedUnimplementedPodServiceServer() {}

// UnsafePodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodServiceServer will
// result in compilation errors.
type UnsafePodServiceServer interface {
	mustEmbedUnimplementedPodServiceServer()
}

func RegisterPodServiceServer(s grpc.ServiceRegistrar, srv PodServiceServer) {
	s.RegisterService(&PodService_ServiceDesc, srv)
}

func _PodService_RunPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).RunPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodService_RunPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).RunPod(ctx, req.(*RunPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PodService_ServiceDesc is the grpc.ServiceDesc for PodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pod.PodService",
	HandlerType: (*PodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunPod",
			Handler:    _PodService_RunPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pod.proto",
}
