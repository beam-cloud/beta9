// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: output.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OutputService_OutputSave_FullMethodName    = "/output.OutputService/OutputSave"
	OutputService_OutputStat_FullMethodName    = "/output.OutputService/OutputStat"
	OutputService_OutputSignURL_FullMethodName = "/output.OutputService/OutputSignURL"
)

// OutputServiceClient is the client API for OutputService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutputServiceClient interface {
	OutputSave(ctx context.Context, in *OutputSaveRequest, opts ...grpc.CallOption) (*OutputSaveResponse, error)
	OutputStat(ctx context.Context, in *OutputStatRequest, opts ...grpc.CallOption) (*OutputStatResponse, error)
	OutputSignURL(ctx context.Context, in *OutputSignURLRequest, opts ...grpc.CallOption) (*OutputSignURLResponse, error)
}

type outputServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOutputServiceClient(cc grpc.ClientConnInterface) OutputServiceClient {
	return &outputServiceClient{cc}
}

func (c *outputServiceClient) OutputSave(ctx context.Context, in *OutputSaveRequest, opts ...grpc.CallOption) (*OutputSaveResponse, error) {
	out := new(OutputSaveResponse)
	err := c.cc.Invoke(ctx, OutputService_OutputSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outputServiceClient) OutputStat(ctx context.Context, in *OutputStatRequest, opts ...grpc.CallOption) (*OutputStatResponse, error) {
	out := new(OutputStatResponse)
	err := c.cc.Invoke(ctx, OutputService_OutputStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outputServiceClient) OutputSignURL(ctx context.Context, in *OutputSignURLRequest, opts ...grpc.CallOption) (*OutputSignURLResponse, error) {
	out := new(OutputSignURLResponse)
	err := c.cc.Invoke(ctx, OutputService_OutputSignURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutputServiceServer is the server API for OutputService service.
// All implementations must embed UnimplementedOutputServiceServer
// for forward compatibility
type OutputServiceServer interface {
	OutputSave(context.Context, *OutputSaveRequest) (*OutputSaveResponse, error)
	OutputStat(context.Context, *OutputStatRequest) (*OutputStatResponse, error)
	OutputSignURL(context.Context, *OutputSignURLRequest) (*OutputSignURLResponse, error)
	mustEmbedUnimplementedOutputServiceServer()
}

// UnimplementedOutputServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOutputServiceServer struct {
}

func (UnimplementedOutputServiceServer) OutputSave(context.Context, *OutputSaveRequest) (*OutputSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputSave not implemented")
}
func (UnimplementedOutputServiceServer) OutputStat(context.Context, *OutputStatRequest) (*OutputStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputStat not implemented")
}
func (UnimplementedOutputServiceServer) OutputSignURL(context.Context, *OutputSignURLRequest) (*OutputSignURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputSignURL not implemented")
}
func (UnimplementedOutputServiceServer) mustEmbedUnimplementedOutputServiceServer() {}

// UnsafeOutputServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutputServiceServer will
// result in compilation errors.
type UnsafeOutputServiceServer interface {
	mustEmbedUnimplementedOutputServiceServer()
}

func RegisterOutputServiceServer(s grpc.ServiceRegistrar, srv OutputServiceServer) {
	s.RegisterService(&OutputService_ServiceDesc, srv)
}

func _OutputService_OutputSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputServiceServer).OutputSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OutputService_OutputSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputServiceServer).OutputSave(ctx, req.(*OutputSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutputService_OutputStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputServiceServer).OutputStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OutputService_OutputStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputServiceServer).OutputStat(ctx, req.(*OutputStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutputService_OutputSignURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputSignURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputServiceServer).OutputSignURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OutputService_OutputSignURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputServiceServer).OutputSignURL(ctx, req.(*OutputSignURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OutputService_ServiceDesc is the grpc.ServiceDesc for OutputService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OutputService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "output.OutputService",
	HandlerType: (*OutputServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OutputSave",
			Handler:    _OutputService_OutputSave_Handler,
		},
		{
			MethodName: "OutputStat",
			Handler:    _OutputService_OutputStat_Handler,
		},
		{
			MethodName: "OutputSignURL",
			Handler:    _OutputService_OutputSignURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "output.proto",
}
