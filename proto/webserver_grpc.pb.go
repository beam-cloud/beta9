// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: webserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebserverService_WebserverRequest_FullMethodName = "/webserver.WebserverService/WebserverRequest"
)

// WebserverServiceClient is the client API for WebserverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebserverServiceClient interface {
	WebserverRequest(ctx context.Context, in *WebserverRequestRequest, opts ...grpc.CallOption) (*WebserverRequestResponse, error)
}

type webserverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebserverServiceClient(cc grpc.ClientConnInterface) WebserverServiceClient {
	return &webserverServiceClient{cc}
}

func (c *webserverServiceClient) WebserverRequest(ctx context.Context, in *WebserverRequestRequest, opts ...grpc.CallOption) (*WebserverRequestResponse, error) {
	out := new(WebserverRequestResponse)
	err := c.cc.Invoke(ctx, WebserverService_WebserverRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebserverServiceServer is the server API for WebserverService service.
// All implementations must embed UnimplementedWebserverServiceServer
// for forward compatibility
type WebserverServiceServer interface {
	WebserverRequest(context.Context, *WebserverRequestRequest) (*WebserverRequestResponse, error)
	mustEmbedUnimplementedWebserverServiceServer()
}

// UnimplementedWebserverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebserverServiceServer struct {
}

func (UnimplementedWebserverServiceServer) WebserverRequest(context.Context, *WebserverRequestRequest) (*WebserverRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebserverRequest not implemented")
}
func (UnimplementedWebserverServiceServer) mustEmbedUnimplementedWebserverServiceServer() {}

// UnsafeWebserverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebserverServiceServer will
// result in compilation errors.
type UnsafeWebserverServiceServer interface {
	mustEmbedUnimplementedWebserverServiceServer()
}

func RegisterWebserverServiceServer(s grpc.ServiceRegistrar, srv WebserverServiceServer) {
	s.RegisterService(&WebserverService_ServiceDesc, srv)
}

func _WebserverService_WebserverRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebserverRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebserverServiceServer).WebserverRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebserverService_WebserverRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebserverServiceServer).WebserverRequest(ctx, req.(*WebserverRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebserverService_ServiceDesc is the grpc.ServiceDesc for WebserverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebserverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webserver.WebserverService",
	HandlerType: (*WebserverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebserverRequest",
			Handler:    _WebserverService_WebserverRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webserver.proto",
}
