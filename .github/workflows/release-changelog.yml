name: Auto Changelog PR

on:
  release:
    types: [published]

    
jobs:
  changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Beta9 repo
        uses: actions/checkout@v3

      - name: Set release artifact name
        id: artifact_name
        uses: actions/github-script@v7
        with:
          script: |
            function formatDate(dateString) {
              const date = new Date(dateString);
              const month = String(date.getMonth() + 1).padStart(2, '0');
              const day = String(date.getDate()).padStart(2, '0');
              const year = String(date.getFullYear()).slice(-2);
              return `${month}-${day}-${year}`;
            }

            const release = context.payload.release;

            const created_at = formatDate(release.created_at)
            const artifact_name = `cl_${created_at}.json`

            core.setOutput('artifact_name', artifact_name);
            core.setOutput('created_at', created_at);

      - name: Download old release artifact if it exists
        id: old_artifact
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: ${{ steps.artifact_name.outputs.artifact_name }}
          path: old_artifact.json

      - name: Create new release artifact
        id: release
        uses: actions/github-script@v7
        with:
          script: |
            function prettyDate(dateString) {
              const date = new Date(dateString);

              return new Intl.DateTimeFormat('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC',
              }).format(date);
            }

            const release = context.payload.release;
              
            const lines = release.body.split('\n');

            const feats = [];
            const fixes = [];
            for (const line of lines) {
              if (line.startsWith('*')) {
                const m = line.match(/^\*\s*([fF]eat|[fF]ix):\s*(.*)\s*/);
                if (m) {
                  const [_, type, description] = m;
                  const byIndex = description.indexOf('by');
                  
                  if (type.toLowerCase() === 'feat') {
                    const cleanedDesc = description.slice(0, byIndex).trim();
                    feats.push(cleanedDesc);
                  } else if (type.toLowerCase() === 'fix') {
                    const cleanedDesc = description.slice(0, byIndex).trim();
                    fixes.push(cleanedDesc);
                  }
                }
              }
            }
            
            // Stop the workflow if no features or fixes are found
            if (feats.length === 0 && fixes.length === 0) {
              core.setOutput('should_continue', 'false');
              core.setOutput('error_message', 'No features or fixes found in the release notes. Stopping workflow.');
              return;
            }

            const name = release.name.replace(/(:\s)/g, '-v')
            const pretty_date = prettyDate(release.created_at)

            // create artifact
            const artifact = {
              name: name,
              feats: feats,
              fixes: fixes,
              created_at: "${{ steps.artifact_name.outputs.created_at }}",
              pretty_date: pretty_date,
            }

            const fs = require('fs')
            let oldArtifact = {}
            try {
              oldArtifact = JSON.parse(fs.readFileSync('old_artifact.json', 'utf8'))
            } catch (error) {
              console.log('No old artifact found')
            }
            
            if (oldArtifact.feats) {
              const uniqueFeats = new Set([...oldArtifact.feats, ...feats]);
              artifact.feats = Array.from(uniqueFeats);
            }
            if (oldArtifact.fixes) {
              const uniqueFixes = new Set([...oldArtifact.fixes, ...fixes]);
              artifact.fixes = Array.from(uniqueFixes);
            }

            const featString = artifact.feats.map(feat => `- ${feat}`).join('\n');
            const fixString = artifact.fixes.map(fix => `- fix ${fix}`).join('\n');

            const artifactJson = JSON.stringify(artifact, null, 2);
            core.setOutput('artifact', artifactJson);
            core.setOutput('name', artifact.name);
            core.setOutput('pretty_date', artifact.pretty_date);
            core.setOutput('feats', featString);
            core.setOutput('fixes', fixString);
            core.setOutput('created_at', artifact.created_at);
            core.setOutput('should_continue', 'true');

      - name: Write artifact to file
        run: echo '${{ steps.release.outputs.artifact }}' > new_artifact.json

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with: 
          name: ${{ steps.artifact_name.outputs.artifact_name }}
          path: new_artifact.json
          retention-days: 10

      - name: Checkout beam-docs repo
        if: steps.release.outputs.should_continue == 'true'
        uses: actions/checkout@v3
        with:
          repository: slai-labs/beam-docs
          path: beam-docs
          token: ${{ secrets.BEAM_DOCS_PAT }}

      - name: Create new release file in beam-docs
        if: steps.release.outputs.should_continue == 'true'
        run: |
          cd beam-docs/v2/releases
          FILENAME="./${{ steps.release.outputs.created_at }}.mdx"
          # check if old release file exists and delete it
          if [ -f "$FILENAME" ]; then
            rm -f $FILENAME
          fi

          # build release file from artifact
          echo "---" >> $FILENAME
          echo "title: \"${{ steps.release.outputs.pretty_date }}\"" >> $FILENAME
          echo "---" >> $FILENAME
          echo "" >> $FILENAME
          echo "## Features" >> $FILENAME
          echo "${{ steps.release.outputs.feats }}" >> $FILENAME
          echo "" >> $FILENAME
          echo "## Fixes" >> $FILENAME
          echo "${{ steps.release.outputs.fixes }}" >> $FILENAME
          echo "" >> $FILENAME

      - name: Update mint.json
        if: steps.release.outputs.should_continue == 'true'
        run: |
          cd beam-docs
          NEW_FILE="v2/releases/${{ steps.release.outputs.created_at }}"
          jq --arg new_file "$NEW_FILE" '
            .navigation[] |= 
              if .group == "Releases" then 
                .pages |= if index($new_file) then . else [$new_file] + . end
              else 
                .
              end
          ' ./mint.json > ./mint.json.tmp && mv ./mint.json.tmp ./mint.json

      - name: Commit and push changes
        if: steps.release.outputs.should_continue == 'true'
        run: |
          cd beam-docs
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git checkout -b autochangelog/${{ steps.release.outputs.name }}
          git add .
          git commit -m "Add changelog for ${{ steps.release.outputs.name }}"
          git push -u origin autochangelog/${{ steps.release.outputs.name }}

      - name: Create pull request
        if: steps.release.outputs.should_continue == 'true'
        env:
          GH_TOKEN: ${{ secrets.BEAM_DOCS_PAT }}
        run: |
          cd beam-docs
          gh pr create --title "Changelog for ${{ steps.release.outputs.name }}" --body "This PR adds the changelog for ${{ steps.release.outputs.name }}." --base main --head autochangelog/${{ steps.release.outputs.name }}