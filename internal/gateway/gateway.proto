syntax = "proto3";

option go_package = "github.com/beam-cloud/beam/proto";

package gateway;

service GatewayService {
  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse) {}
  rpc HeadObject(HeadObjectRequest) returns (HeadObjectResponse) {}
  rpc PutObject(PutObjectRequest) returns (PutObjectResponse) {}
  rpc GetTaskStream(GetTaskStreamRequest) returns (stream TaskStreamResponse);
  rpc GetNextTask(GetNextTaskRequest) returns (GetNextTaskResponse);
  rpc StartTask(StartTaskRequest) returns (StartTaskResponse);
  rpc EndTask(EndTaskRequest) returns (EndTaskResponse);
  rpc MonitorTask(MonitorTaskRequest) returns (stream MonitorTaskResponse);
}

message AuthorizeRequest {}

message AuthorizeResponse {
  bool ok = 1;
  string context_id = 2;
  string new_token = 3;
  string error_msg = 4;
}

message ObjectMetadata {
  string name = 1;
  int64 size = 2;
}

message HeadObjectRequest { string hash = 1; }

message HeadObjectResponse {
  bool ok = 1;
  bool exists = 2;
  string object_id = 3;
  ObjectMetadata object_metadata = 4;
  string error_msg = 5;
}

message PutObjectRequest {
  bytes object_content = 1;
  ObjectMetadata object_metadata = 2;
  string hash = 3;
  bool overwrite = 4;
}

message PutObjectResponse {
  bool ok = 1;
  string object_id = 2;
  string error_msg = 3;
}

// Task queue messages
message GetNextTaskRequest {
  string queue_name = 1;
  string container_id = 2;
  string s2s_token = 3;
}

message GetNextTaskResponse {
  bytes task = 1;
  bool task_available = 2;
}

message GetTaskStreamRequest {
  string queue_name = 1;
  string container_id = 2;
  string s2s_token = 3;
}

message TaskStreamResponse { bytes task = 1; }

message StartTaskRequest {
  string task_id = 1;
  string queue_name = 2;
  string container_id = 3;
  string s2s_token = 4;
}

message StartTaskResponse { bool ok = 1; }

message EndTaskRequest {
  string task_id = 1;
  string queue_name = 2;
  float task_duration = 3;
  string task_status = 4;
  string container_id = 5;
  string container_hostname = 6;
  float scale_down_delay = 7;
  string s2s_token = 8;
}

message EndTaskResponse { bool ok = 1; }

message MonitorTaskRequest {
  string task_id = 1;
  string queue_name = 2;
  string container_id = 3;
  string s2s_token = 4;
}

message MonitorTaskResponse {
  bool ok = 1;
  bool canceled = 2;
  bool complete = 3;
  bool timed_out = 4;
}
