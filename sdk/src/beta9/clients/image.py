# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: image.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncGenerator, List

import betterproto
import grpclib


@dataclass
class VerifyImageBuildRequest(betterproto.Message):
    python_version: str = betterproto.string_field(1)
    python_packages: List[str] = betterproto.string_field(2)
    commands: List[str] = betterproto.string_field(3)
    force_rebuild: bool = betterproto.bool_field(4)
    existing_image_uri: str = betterproto.string_field(5)


@dataclass
class VerifyImageBuildResponse(betterproto.Message):
    image_id: str = betterproto.string_field(1)
    valid: bool = betterproto.bool_field(2)
    exists: bool = betterproto.bool_field(3)


@dataclass
class BuildImageRequest(betterproto.Message):
    # These parameters are used for a "beta9" managed image
    python_version: str = betterproto.string_field(1)
    python_packages: List[str] = betterproto.string_field(2)
    commands: List[str] = betterproto.string_field(3)
    # These parameters are used for an existing image
    existing_image_uri: str = betterproto.string_field(4)
    existing_image_creds: str = betterproto.string_field(5)


@dataclass
class BuildImageResponse(betterproto.Message):
    image_id: str = betterproto.string_field(1)
    msg: str = betterproto.string_field(2)
    done: bool = betterproto.bool_field(3)
    success: bool = betterproto.bool_field(4)


class ImageServiceStub(betterproto.ServiceStub):
    async def verify_image_build(
        self,
        *,
        python_version: str = "",
        python_packages: List[str] = [],
        commands: List[str] = [],
        force_rebuild: bool = False,
        existing_image_uri: str = "",
    ) -> VerifyImageBuildResponse:
        request = VerifyImageBuildRequest()
        request.python_version = python_version
        request.python_packages = python_packages
        request.commands = commands
        request.force_rebuild = force_rebuild
        request.existing_image_uri = existing_image_uri

        return await self._unary_unary(
            "/image.ImageService/VerifyImageBuild",
            request,
            VerifyImageBuildResponse,
        )

    async def build_image(
        self,
        *,
        python_version: str = "",
        python_packages: List[str] = [],
        commands: List[str] = [],
        existing_image_uri: str = "",
        existing_image_creds: str = "",
    ) -> AsyncGenerator[BuildImageResponse, None]:
        request = BuildImageRequest()
        request.python_version = python_version
        request.python_packages = python_packages
        request.commands = commands
        request.existing_image_uri = existing_image_uri
        request.existing_image_creds = existing_image_creds

        async for response in self._unary_stream(
            "/image.ImageService/BuildImage",
            request,
            BuildImageResponse,
        ):
            yield response
