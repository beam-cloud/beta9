# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: map.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib


@dataclass
class MapSetRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)
    value: bytes = betterproto.bytes_field(3)


@dataclass
class MapSetResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)


@dataclass
class MapGetRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)


@dataclass
class MapGetResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    value: bytes = betterproto.bytes_field(2)


@dataclass
class MapDeleteRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)


@dataclass
class MapDeleteResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)


@dataclass
class MapCountRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass
class MapCountResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass
class MapKeysRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass
class MapKeysResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    keys: List[str] = betterproto.string_field(2)


class MapServiceStub(betterproto.ServiceStub):
    async def map_set(
        self, *, name: str = "", key: str = "", value: bytes = b""
    ) -> MapSetResponse:
        request = MapSetRequest()
        request.name = name
        request.key = key
        request.value = value

        return await self._unary_unary(
            "/map.MapService/MapSet",
            request,
            MapSetResponse,
        )

    async def map_get(self, *, name: str = "", key: str = "") -> MapGetResponse:
        request = MapGetRequest()
        request.name = name
        request.key = key

        return await self._unary_unary(
            "/map.MapService/MapGet",
            request,
            MapGetResponse,
        )

    async def map_delete(self, *, name: str = "", key: str = "") -> MapDeleteResponse:
        request = MapDeleteRequest()
        request.name = name
        request.key = key

        return await self._unary_unary(
            "/map.MapService/MapDelete",
            request,
            MapDeleteResponse,
        )

    async def map_count(self, *, name: str = "") -> MapCountResponse:
        request = MapCountRequest()
        request.name = name

        return await self._unary_unary(
            "/map.MapService/MapCount",
            request,
            MapCountResponse,
        )

    async def map_keys(self, *, name: str = "") -> MapKeysResponse:
        request = MapKeysRequest()
        request.name = name

        return await self._unary_unary(
            "/map.MapService/MapKeys",
            request,
            MapKeysResponse,
        )
