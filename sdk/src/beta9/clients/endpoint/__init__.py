# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: endpoint.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class EndpointServeRequest(betterproto.Message):
    stub_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class EndpointServeResponse(betterproto.Message):
    output: str = betterproto.string_field(1)
    done: bool = betterproto.bool_field(2)
    exit_code: int = betterproto.int32_field(3)


class EndpointServiceStub(betterproto.ServiceStub):
    async def endpoint_serve(
        self,
        endpoint_serve_request: "EndpointServeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["EndpointServeResponse"]:
        async for response in self._unary_stream(
            "/endpoint.EndpointService/EndpointServe",
            endpoint_serve_request,
            EndpointServeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class EndpointServiceBase(ServiceBase):

    async def endpoint_serve(
        self, endpoint_serve_request: "EndpointServeRequest"
    ) -> AsyncIterator["EndpointServeResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield EndpointServeResponse()

    async def __rpc_endpoint_serve(
        self,
        stream: "grpclib.server.Stream[EndpointServeRequest, EndpointServeResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.endpoint_serve,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/endpoint.EndpointService/EndpointServe": grpclib.const.Handler(
                self.__rpc_endpoint_serve,
                grpclib.const.Cardinality.UNARY_STREAM,
                EndpointServeRequest,
                EndpointServeResponse,
            ),
        }
