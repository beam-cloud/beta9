# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: container.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class CommandExecutionRequest(betterproto.Message):
    stub_id: str = betterproto.string_field(1)
    command: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CommandExecutionResponse(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    output: str = betterproto.string_field(2)
    done: bool = betterproto.bool_field(3)
    exit_code: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class ContainerTaskStatusUpdateRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    status: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ContainerTaskStatusUpdateResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)


class ContainerServiceStub(betterproto.ServiceStub):
    async def execute_command(
        self,
        command_execution_request: "CommandExecutionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["CommandExecutionResponse"]:
        async for response in self._unary_stream(
            "/container.ContainerService/ExecuteCommand",
            command_execution_request,
            CommandExecutionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class ContainerServiceBase(ServiceBase):

    async def execute_command(
        self, command_execution_request: "CommandExecutionRequest"
    ) -> AsyncIterator["CommandExecutionResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield CommandExecutionResponse()

    async def __rpc_execute_command(
        self,
        stream: "grpclib.server.Stream[CommandExecutionRequest, CommandExecutionResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.execute_command,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/container.ContainerService/ExecuteCommand": grpclib.const.Handler(
                self.__rpc_execute_command,
                grpclib.const.Cardinality.UNARY_STREAM,
                CommandExecutionRequest,
                CommandExecutionResponse,
            ),
        }
