# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: volume.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class GetOrCreateVolumeRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetOrCreateVolumeResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    volume_id: str = betterproto.string_field(2)


class VolumeServiceStub(betterproto.ServiceStub):
    async def get_or_create_volume(
        self,
        get_or_create_volume_request: "GetOrCreateVolumeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOrCreateVolumeResponse":
        return await self._unary_unary(
            "/volume.VolumeService/GetOrCreateVolume",
            get_or_create_volume_request,
            GetOrCreateVolumeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class VolumeServiceBase(ServiceBase):
    async def get_or_create_volume(
        self, get_or_create_volume_request: "GetOrCreateVolumeRequest"
    ) -> "GetOrCreateVolumeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_or_create_volume(
        self,
        stream: "grpclib.server.Stream[GetOrCreateVolumeRequest, GetOrCreateVolumeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_or_create_volume(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/volume.VolumeService/GetOrCreateVolume": grpclib.const.Handler(
                self.__rpc_get_or_create_volume,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOrCreateVolumeRequest,
                GetOrCreateVolumeResponse,
            ),
        }
