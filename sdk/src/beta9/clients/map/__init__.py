# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: map.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MapSetRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)
    value: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class MapSetResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class MapGetRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MapGetResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    value: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class MapDeleteRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MapDeleteResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class MapCountRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MapCountResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MapKeysRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MapKeysResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    keys: List[str] = betterproto.string_field(2)


class MapServiceStub(betterproto.ServiceStub):
    async def map_set(
        self,
        map_set_request: "MapSetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MapSetResponse":
        return await self._unary_unary(
            "/map.MapService/MapSet",
            map_set_request,
            MapSetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def map_get(
        self,
        map_get_request: "MapGetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MapGetResponse":
        return await self._unary_unary(
            "/map.MapService/MapGet",
            map_get_request,
            MapGetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def map_delete(
        self,
        map_delete_request: "MapDeleteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MapDeleteResponse":
        return await self._unary_unary(
            "/map.MapService/MapDelete",
            map_delete_request,
            MapDeleteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def map_count(
        self,
        map_count_request: "MapCountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MapCountResponse":
        return await self._unary_unary(
            "/map.MapService/MapCount",
            map_count_request,
            MapCountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def map_keys(
        self,
        map_keys_request: "MapKeysRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MapKeysResponse":
        return await self._unary_unary(
            "/map.MapService/MapKeys",
            map_keys_request,
            MapKeysResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MapServiceBase(ServiceBase):

    async def map_set(self, map_set_request: "MapSetRequest") -> "MapSetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def map_get(self, map_get_request: "MapGetRequest") -> "MapGetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def map_delete(
        self, map_delete_request: "MapDeleteRequest"
    ) -> "MapDeleteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def map_count(
        self, map_count_request: "MapCountRequest"
    ) -> "MapCountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def map_keys(self, map_keys_request: "MapKeysRequest") -> "MapKeysResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_map_set(
        self, stream: "grpclib.server.Stream[MapSetRequest, MapSetResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.map_set(request)
        await stream.send_message(response)

    async def __rpc_map_get(
        self, stream: "grpclib.server.Stream[MapGetRequest, MapGetResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.map_get(request)
        await stream.send_message(response)

    async def __rpc_map_delete(
        self, stream: "grpclib.server.Stream[MapDeleteRequest, MapDeleteResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.map_delete(request)
        await stream.send_message(response)

    async def __rpc_map_count(
        self, stream: "grpclib.server.Stream[MapCountRequest, MapCountResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.map_count(request)
        await stream.send_message(response)

    async def __rpc_map_keys(
        self, stream: "grpclib.server.Stream[MapKeysRequest, MapKeysResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.map_keys(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/map.MapService/MapSet": grpclib.const.Handler(
                self.__rpc_map_set,
                grpclib.const.Cardinality.UNARY_UNARY,
                MapSetRequest,
                MapSetResponse,
            ),
            "/map.MapService/MapGet": grpclib.const.Handler(
                self.__rpc_map_get,
                grpclib.const.Cardinality.UNARY_UNARY,
                MapGetRequest,
                MapGetResponse,
            ),
            "/map.MapService/MapDelete": grpclib.const.Handler(
                self.__rpc_map_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                MapDeleteRequest,
                MapDeleteResponse,
            ),
            "/map.MapService/MapCount": grpclib.const.Handler(
                self.__rpc_map_count,
                grpclib.const.Cardinality.UNARY_UNARY,
                MapCountRequest,
                MapCountResponse,
            ),
            "/map.MapService/MapKeys": grpclib.const.Handler(
                self.__rpc_map_keys,
                grpclib.const.Cardinality.UNARY_UNARY,
                MapKeysRequest,
                MapKeysResponse,
            ),
        }
