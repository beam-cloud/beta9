# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: image.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class VerifyImageBuildRequest(betterproto.Message):
    python_version: str = betterproto.string_field(1)
    python_packages: List[str] = betterproto.string_field(2)
    commands: List[str] = betterproto.string_field(3)
    force_rebuild: bool = betterproto.bool_field(4)
    existing_image_uri: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class VerifyImageBuildResponse(betterproto.Message):
    image_id: str = betterproto.string_field(1)
    valid: bool = betterproto.bool_field(2)
    exists: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class BuildImageRequest(betterproto.Message):
    python_version: str = betterproto.string_field(1)
    """These parameters are used for a "beta9" managed image"""

    python_packages: List[str] = betterproto.string_field(2)
    commands: List[str] = betterproto.string_field(3)
    existing_image_uri: str = betterproto.string_field(4)
    """These parameters are used for an existing image"""

    existing_image_creds: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class BuildImageResponse(betterproto.Message):
    image_id: str = betterproto.string_field(1)
    msg: str = betterproto.string_field(2)
    done: bool = betterproto.bool_field(3)
    success: bool = betterproto.bool_field(4)


class ImageServiceStub(betterproto.ServiceStub):
    async def verify_image_build(
        self,
        verify_image_build_request: "VerifyImageBuildRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VerifyImageBuildResponse":
        return await self._unary_unary(
            "/image.ImageService/VerifyImageBuild",
            verify_image_build_request,
            VerifyImageBuildResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def build_image(
        self,
        build_image_request: "BuildImageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["BuildImageResponse"]:
        async for response in self._unary_stream(
            "/image.ImageService/BuildImage",
            build_image_request,
            BuildImageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class ImageServiceBase(ServiceBase):

    async def verify_image_build(
        self, verify_image_build_request: "VerifyImageBuildRequest"
    ) -> "VerifyImageBuildResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def build_image(
        self, build_image_request: "BuildImageRequest"
    ) -> AsyncIterator["BuildImageResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield BuildImageResponse()

    async def __rpc_verify_image_build(
        self,
        stream: "grpclib.server.Stream[VerifyImageBuildRequest, VerifyImageBuildResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.verify_image_build(request)
        await stream.send_message(response)

    async def __rpc_build_image(
        self, stream: "grpclib.server.Stream[BuildImageRequest, BuildImageResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.build_image,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/image.ImageService/VerifyImageBuild": grpclib.const.Handler(
                self.__rpc_verify_image_build,
                grpclib.const.Cardinality.UNARY_UNARY,
                VerifyImageBuildRequest,
                VerifyImageBuildResponse,
            ),
            "/image.ImageService/BuildImage": grpclib.const.Handler(
                self.__rpc_build_image,
                grpclib.const.Cardinality.UNARY_STREAM,
                BuildImageRequest,
                BuildImageResponse,
            ),
        }
