# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: function.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class FunctionInvokeRequest(betterproto.Message):
    stub_id: str = betterproto.string_field(1)
    args: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class FunctionInvokeResponse(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    output: str = betterproto.string_field(2)
    done: bool = betterproto.bool_field(3)
    exit_code: int = betterproto.int32_field(4)
    result: bytes = betterproto.bytes_field(5)


@dataclass(eq=False, repr=False)
class FunctionGetArgsRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FunctionGetArgsResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    args: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class FunctionSetResultRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    result: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class FunctionSetResultResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class FunctionMonitorRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    stub_id: str = betterproto.string_field(2)
    container_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class FunctionMonitorResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    cancelled: bool = betterproto.bool_field(2)
    complete: bool = betterproto.bool_field(3)
    timed_out: bool = betterproto.bool_field(4)


class FunctionServiceStub(betterproto.ServiceStub):
    async def function_invoke(
        self,
        function_invoke_request: "FunctionInvokeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["FunctionInvokeResponse"]:
        async for response in self._unary_stream(
            "/function.FunctionService/FunctionInvoke",
            function_invoke_request,
            FunctionInvokeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def function_get_args(
        self,
        function_get_args_request: "FunctionGetArgsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FunctionGetArgsResponse":
        return await self._unary_unary(
            "/function.FunctionService/FunctionGetArgs",
            function_get_args_request,
            FunctionGetArgsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def function_set_result(
        self,
        function_set_result_request: "FunctionSetResultRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FunctionSetResultResponse":
        return await self._unary_unary(
            "/function.FunctionService/FunctionSetResult",
            function_set_result_request,
            FunctionSetResultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def function_monitor(
        self,
        function_monitor_request: "FunctionMonitorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["FunctionMonitorResponse"]:
        async for response in self._unary_stream(
            "/function.FunctionService/FunctionMonitor",
            function_monitor_request,
            FunctionMonitorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class FunctionServiceBase(ServiceBase):

    async def function_invoke(
        self, function_invoke_request: "FunctionInvokeRequest"
    ) -> AsyncIterator["FunctionInvokeResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield FunctionInvokeResponse()

    async def function_get_args(
        self, function_get_args_request: "FunctionGetArgsRequest"
    ) -> "FunctionGetArgsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def function_set_result(
        self, function_set_result_request: "FunctionSetResultRequest"
    ) -> "FunctionSetResultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def function_monitor(
        self, function_monitor_request: "FunctionMonitorRequest"
    ) -> AsyncIterator["FunctionMonitorResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield FunctionMonitorResponse()

    async def __rpc_function_invoke(
        self,
        stream: "grpclib.server.Stream[FunctionInvokeRequest, FunctionInvokeResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.function_invoke,
            stream,
            request,
        )

    async def __rpc_function_get_args(
        self,
        stream: "grpclib.server.Stream[FunctionGetArgsRequest, FunctionGetArgsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.function_get_args(request)
        await stream.send_message(response)

    async def __rpc_function_set_result(
        self,
        stream: "grpclib.server.Stream[FunctionSetResultRequest, FunctionSetResultResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.function_set_result(request)
        await stream.send_message(response)

    async def __rpc_function_monitor(
        self,
        stream: "grpclib.server.Stream[FunctionMonitorRequest, FunctionMonitorResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.function_monitor,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/function.FunctionService/FunctionInvoke": grpclib.const.Handler(
                self.__rpc_function_invoke,
                grpclib.const.Cardinality.UNARY_STREAM,
                FunctionInvokeRequest,
                FunctionInvokeResponse,
            ),
            "/function.FunctionService/FunctionGetArgs": grpclib.const.Handler(
                self.__rpc_function_get_args,
                grpclib.const.Cardinality.UNARY_UNARY,
                FunctionGetArgsRequest,
                FunctionGetArgsResponse,
            ),
            "/function.FunctionService/FunctionSetResult": grpclib.const.Handler(
                self.__rpc_function_set_result,
                grpclib.const.Cardinality.UNARY_UNARY,
                FunctionSetResultRequest,
                FunctionSetResultResponse,
            ),
            "/function.FunctionService/FunctionMonitor": grpclib.const.Handler(
                self.__rpc_function_monitor,
                grpclib.const.Cardinality.UNARY_STREAM,
                FunctionMonitorRequest,
                FunctionMonitorResponse,
            ),
        }
