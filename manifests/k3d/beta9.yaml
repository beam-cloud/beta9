apiVersion: v1
kind: Namespace
metadata:
  name: beta9
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gateway-role
  namespace: beta9
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gateway-role-binding
  namespace: beta9
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gateway-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: beta9
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  namespace: beta9
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        app: gateway
    spec:
      containers:
      - name: gateway
        image: registry.localhost:5000/beta9-gateway:latest
        command:
        - /usr/local/bin/gateway
        ports:
        - name: grpc
          containerPort: 1993
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        securityContext:
          privileged: true
        volumeMounts:
        - name: images
          mountPath: /images
        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe: &probe
          httpGet:
            path: /api/v1/health
            port: 1994
          periodSeconds: 3
          failureThreshold: 3
        readinessProbe: *probe
        startupProbe:
          <<: *probe
          failureThreshold: 10
          initialDelaySeconds: 10
      volumes:
      - name: images
        persistentVolumeClaim:
          claimName: beta9-images
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  namespace: beta9
spec:
  replicas: 1
  selector:
    matchLabels:
      app: proxy
  template:
    metadata:
      labels:
        app: proxy
    spec:
      containers:
      - name: proxy
        image: registry.localhost:5000/beta9-proxy:latest
        command:
        - /usr/local/bin/proxy
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: beta9-images
  namespace: beta9
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: local-path
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
  namespace: beta9
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  selector:
    app: gateway
  ports:
  - name: http
    port: 1994
    targetPort: 1994
    protocol: TCP
  - name: grpc
    port: 1993
    targetPort: 1993
    protocol: TCP
  - name: prometheus
    port: 9090
    targetPort: 9090
    protocol: TCP
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRouteTCP
metadata:
  name: gateway
  namespace: beta9
spec:
  entryPoints:
  - web
  routes:
  - match: HostSNI(`*`)
    kind: Rule
    services:
    - name: gateway
      port: 1993
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: redis
  namespace: beta9
spec:
  repo: https://charts.bitnami.com/bitnami
  chart: redis
  createNamespace: false
  version: 18.6.1
  valuesContent: |-
    nameOverride: redis
    fullnameOverride: redis
    architecture: standalone
    auth:
      enabled: false
    master:
      configuration: |
        activedefrag yes
        notify-keyspace-events AKE
      persistence:
        size: 1Gi
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: postgres
  namespace: beta9
spec:
  repo: https://charts.bitnami.com/bitnami
  chart: postgresql
  createNamespace: false
  version: 13.2.25
  valuesContent: |-
    nameOverride: postgresql
    fullnameOverride: postgresql
    global:
      postgresql:
        auth:
          username: root
          password: password
          database: main
    primary:
      extendedConfiguration: |
        max_connections=400
        shared_buffers='400MB'
    volumePermissions:
      enabled: true
    persistence:
      enabled: true
      size: 1Gi
