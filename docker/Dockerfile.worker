# syntax=docker/dockerfile:1.7-labs
ARG BASE_STAGE=dev

FROM golang:1.22.10-bookworm AS golang

RUN apt-get update && apt-get install -y curl git



FROM debian:bookworm as dropbear
ENV DROPBEAR_VERSION=2025.88
ENV DROPBEAR_SHA256=783f50ea27b17c16da89578fafdb6decfa44bb8f6590e5698a4e4d3672dc53d4

RUN apt update && apt install curl bzip2 zlib1g-dev make gcc -y  
RUN mkdir /dropbear && \
    curl -fsSL https://dropbear.nl/mirror/releases/dropbear-${DROPBEAR_VERSION}.tar.bz2 -o /dropbear/dropbear.tar.bz2 && \
    echo "${DROPBEAR_SHA256}  /dropbear/dropbear.tar.bz2" | sha256sum -c -
RUN cd /dropbear && tar -xvf dropbear.tar.bz2 && cd dropbear-${DROPBEAR_VERSION} && ./configure --enable-static --enable-pam=no CPPFLAGS="-DDISABLE_PAM" LDFLAGS="-static" && make PROGRAMS="dropbear" && mv dropbear /usr/local/bin/dropbear 

# runc
# ========================
# FIXME: once we upgrade to 1.23, we can just use "FROM golang"
FROM golang:1.23-bookworm AS runc

WORKDIR /workspace

RUN apt-get update && apt-get install -y \
    make \
    btrfs-progs \
    git \
    go-md2man \
    iptables \
    libapparmor-dev \
    libglib2.0-dev \
    libgpgme11-dev \
    libseccomp-dev \
    libselinux1-dev \
    libbtrfs-dev \
    pkg-config

RUN <<EOT
set -eux
git clone -b dlm/force-compat-mode-on-restore https://github.com/beam-cloud/runc.git /workspace/runc \
  && cd /workspace/runc \
  && git reset --hard 29bdf366e59697ca12cde1da05b828d579b1eb9a

cd /workspace/runc
make
make install
/usr/local/sbin/runc --version
cd ..

git clone https://github.com/containers/buildah.git /workspace/buildah
cd /workspace/buildah
make BUILDTAGS="cni"
make install
EOT

ENV CGO_ENABLED="0"  \
    DISABLE_DOCS="1" \
    GO_DYN_FLAGS=""  \
    BUILDTAGS="containers_image_openpgp"

RUN <<EOT
set -eux
git clone https://github.com/containers/skopeo.git /workspace/skopeo
cd /workspace/skopeo
make
make install
/usr/local/bin/skopeo --version
EOT


# nvidia-container-toolkit
# ========================
FROM golang:1.23-bookworm AS nvidia-container-toolkit

WORKDIR /workspace

RUN apt-get update && apt-get install -y build-essential

RUN <<EOT
git clone https://github.com/beam-cloud/nvidia-container-toolkit.git .
make build
make binaries
EOT

# beta9 worker
# ========================
FROM golang AS worker

WORKDIR /workspace

COPY go.mod go.sum ./
RUN go mod download
COPY --exclude=sdk . .

RUN go build -gcflags "all=-N" -o /usr/local/bin/worker-debug ./cmd/worker/main.go
RUN go build -o /usr/local/bin/worker ./cmd/worker/main.go

# uv
# ========================
FROM golang AS uv
RUN curl -LsSf https://astral.sh/uv/0.6.13/install.sh | sh

# final image
# ========================
FROM nvidia/cuda:12.8.0-base-ubuntu22.04 AS release
FROM release AS dev

FROM ${BASE_STAGE} AS final
ENV DEBIAN_FRONTEND="noninteractive"
WORKDIR /workspace

RUN apt-get update && \
    apt-get install -y curl gpg && \
    curl -fsSL https://nvidia.github.io/nvidia-container-runtime/gpgkey | apt-key add - && \
    curl -s -L https://nvidia.github.io/nvidia-docker/ubuntu22.04/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list \
    curl -fsSL https://nvidia.github.io/nvidia-container-runtime/ubuntu22.04/nvidia-container-runtime.list | tee /etc/apt/sources.list.d/nvidia-container-runtime.list && \
    apt-get update && \
    apt-get install psmisc

RUN curl -L https://beam-runner-python-deps.s3.amazonaws.com/juicefs -o /usr/local/bin/juicefs && chmod +x /usr/local/bin/juicefs
RUN curl -fsSL https://tailscale.com/install.sh | sh
RUN apt-get install -y --no-install-recommends nvidia-container-toolkit-base nvidia-container-toolkit
RUN apt-get update && apt-get install -y fuse3 libfuse2 libfuse3-dev libfuse-dev bash-completion

RUN apt-get install -y libbtrfs-dev libgpgme11-dev
RUN mkdir -p /etc/containers/registries.conf.d
RUN curl -L https://raw.githubusercontent.com/containers/shortnames/refs/heads/main/shortnames.conf \
    -o /etc/containers/registries.conf.d/shortnames.conf
RUN echo 'unqualified-search-registries = ["docker.io"]' > /etc/containers/registries.conf

ARG CEDANA_VERSION=0.9.240
ARG CEDANA_BASE_URL=""
ARG CEDANA_TOKEN=""

RUN <<EOT
set -eux
if [ "$(uname -m)" = "x86_64" ] || [ "$(uname -m)" = "aarch64" ]; then
    apt-get update && apt-get install -y \
        gcc \
        make \
        python3-protobuf \
        libbsd-dev \
        libdrm-dev \
        libnet1-dev \
        libnl-3-dev \
        libcap-dev \
        uuid-dev \
        gnutls-dev \
        libnftables-dev \
        pkg-config \
        protobuf-c-compiler \
        protobuf-compiler \
        libprotobuf-c-dev \
        git
    git clone https://github.com/checkpoint-restore/criu.git
    cd criu

    # Skip GPU plugins on ARM64 since they're x86_64 specific
    if [ "$(uname -m)" = "x86_64" ]; then
        make install-lib install-criu install-compel install-amdgpu_plugin install-cuda_plugin PREFIX=/usr SKIP_PIP_INSTALL=1
        stat /usr/lib/criu/cuda_plugin.so 
    else
        make install-lib install-criu install-compel PREFIX=/usr SKIP_PIP_INSTALL=1
    fi
    criu --version
    cd .. && rm -rf criu
fi
EOT

ARG TARGETARCH

ENV MOUNT_S3_URL_ARM64="https://s3.amazonaws.com/mountpoint-s3-release/1.8.0/arm64/mount-s3-1.8.0-arm64.tar.gz"
ENV MOUNT_S3_URL_AMD64="https://s3.amazonaws.com/mountpoint-s3-release/1.8.0/x86_64/mount-s3-1.8.0-x86_64.tar.gz"

RUN MOUNT_S3_URL=$(if [ "$TARGETARCH" = "arm64" ]; then echo $MOUNT_S3_URL_ARM64; else echo $MOUNT_S3_URL_AMD64; fi) && \
    curl -O $MOUNT_S3_URL && \
    TARBALL=$(basename $MOUNT_S3_URL) && \
    mkdir mount-s3 && \
    tar -xzf $TARBALL -C mount-s3 && \
    mv mount-s3/bin/mount-s3 /usr/local/bin/ms3 && chmod +x /usr/local/bin/ms3 && \
    rm -rf mount-s3 $TARBALL

RUN curl -L https://github.com/NVIDIA/cuda-checkpoint/raw/refs/heads/main/bin/x86_64_Linux/cuda-checkpoint -o /usr/local/bin/cuda-checkpoint && \
    chmod +x /usr/local/bin/cuda-checkpoint

RUN apt-get install -y ripgrep

RUN apt-get remove -y curl && \
    apt-get clean && apt-get autoremove -y && apt-get autopurge -y && \
    rm -rf /var/lib/apt/lists/* /var/log/*


ENV BUILDAH_RUNTIME=/usr/local/sbin/runc

RUN mkdir -p /workspace/etc
RUN echo "nameserver 8.8.8.8" > /workspace/etc/resolv.conf
RUN echo '127.0.0.1 localhost' > /workspace/etc/hosts
RUN echo 'hosts: files dns' > /workspace/etc/nsswitch.conf
COPY ./bin/beta9-cli /usr/local/bin/beta9
RUN chmod +x /usr/local/bin/beta9
COPY ./bin/snapshot /usr/local/bin/snapshot
RUN chmod +x /usr/local/bin/snapshot

COPY --from=runc /usr/local/sbin/runc /usr/local/sbin/runc
COPY --from=runc /usr/local/bin/buildah /usr/local/bin/buildah
COPY --from=runc /usr/local/bin/skopeo /usr/local/bin/skopeo
COPY --from=runc /workspace/skopeo/default-policy.json /etc/containers/policy.json
COPY --from=nvidia-container-toolkit /workspace/nvidia-container-runtime* /usr/bin/

# LD_PRELOAD libraries
COPY ./bin/volume_cache_x86.so /usr/local/lib/volume_cache_x86.so
COPY ./bin/volume_cache_arm.so /usr/local/lib/volume_cache_arm.so

RUN if [ "$(uname -m)" = "x86_64" ]; then \
    cp /usr/local/lib/volume_cache_x86.so /usr/local/lib/volume_cache.so; \
else \
    cp /usr/local/lib/volume_cache_arm.so /usr/local/lib/volume_cache.so; \
fi

COPY --from=worker /usr/local/bin/worker /usr/local/bin/worker
COPY --from=worker /usr/local/bin/worker-debug /usr/local/bin/worker-debug
COPY ./sdk/src/beta9 /workspace/sdk
COPY --from=uv /root/.local/bin/uv /usr/local/bin/uv
COPY --from=dropbear /usr/local/bin/dropbear /usr/local/bin/dropbear

VOLUME "/usr/lib/x86_64-linux-gnu"
VOLUME "/usr/lib/aarch64-linux-gnu"

RUN mkdir -p /etc/criu
RUN touch /etc/criu/default.conf
# add the following options to the default.conf file on new lines
RUN echo "verbosity 4" >> /etc/criu/default.conf
RUN echo "display-stats" >> /etc/criu/default.conf
RUN echo "timeout 60" >> /etc/criu/default.conf

ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics,ngx,video
ENV _BUILDAH_STARTED_IN_USERNS="" \
    BUILDAH_ISOLATION=chroot
