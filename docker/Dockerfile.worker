# syntax=docker/dockerfile:1.7-labs
ARG BASE_STAGE=dev

FROM golang:1.22.10-bookworm AS golang

RUN apt-get update && apt-get install -y curl git


# skopeo
# ========================
FROM golang AS skopeo

WORKDIR /workspace

ENV CGO_ENABLED="0"  \
    DISABLE_DOCS="1" \
    GO_DYN_FLAGS=""  \
    BUILDTAGS="containers_image_openpgp"

RUN <<EOT
set -eux
git clone https://github.com/containers/skopeo.git .
make
make install
/usr/local/bin/skopeo --version
EOT


# runc
# ========================
FROM golang AS runc

WORKDIR /workspace

RUN apt-get install -y libseccomp-dev

RUN <<EOT
set -eux
git clone https://github.com/beam-cloud/runc.git .
make
make install
/usr/local/sbin/runc --version
EOT


# nvidia-container-toolkit
# ========================
FROM golang AS nvidia-container-toolkit

WORKDIR /workspace

RUN apt-get update && apt-get install -y build-essential

RUN <<EOT
git clone -b np/update --single-branch https://github.com/beam-cloud/nvidia-container-toolkit.git .
make build
make binaries
EOT


# buildah build stage
FROM golang AS buildah

WORKDIR /workspace
RUN apt-get update && apt-get install -y \
    make \
    btrfs-progs \
    git \
    go-md2man \
    iptables \
    libapparmor-dev \
    libglib2.0-dev \
    libgpgme11-dev \
    libseccomp-dev \
    libselinux1-dev \
    libbtrfs-dev \
    pkg-config

RUN git clone https://github.com/containers/buildah.git . && \
    make BUILDTAGS="cni" && \
    make install

# beta9 worker
# ========================
FROM golang AS worker

WORKDIR /workspace

COPY go.mod go.sum ./
RUN go mod download
COPY --exclude=sdk . .
RUN go build -o /usr/local/bin/worker ./cmd/worker/main.go


# final image
# ========================
FROM nvidia/cuda:12.3.1-base-ubuntu22.04 AS release
FROM release AS dev

FROM ${BASE_STAGE} AS final
ENV DEBIAN_FRONTEND="noninteractive"
WORKDIR /workspace

RUN apt-get update && \
    apt-get install -y curl gpg && \
    curl -fsSL https://nvidia.github.io/nvidia-container-runtime/gpgkey | apt-key add - && \
    curl -s -L https://nvidia.github.io/nvidia-docker/ubuntu22.04/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list \
    curl -fsSL https://nvidia.github.io/nvidia-container-runtime/ubuntu22.04/nvidia-container-runtime.list | tee /etc/apt/sources.list.d/nvidia-container-runtime.list && \
    apt-get update && \
    apt-get install psmisc

RUN curl -L https://beam-runner-python-deps.s3.amazonaws.com/juicefs -o /usr/local/bin/juicefs && chmod +x /usr/local/bin/juicefs
RUN curl -fsSL https://tailscale.com/install.sh | sh
RUN apt-get install -y --no-install-recommends nvidia-container-toolkit-base nvidia-container-toolkit

RUN apt-get update && apt-get install -y fuse3 libfuse2 libfuse3-dev libfuse-dev bash-completion

RUN apt-get install -y libbtrfs-dev libgpgme11-dev
RUN mkdir -p /etc/containers/registries.conf.d
RUN curl -L https://raw.githubusercontent.com/containers/shortnames/refs/heads/main/shortnames.conf \
    -o /etc/containers/registries.conf.d/shortnames.conf

# XXX: Remove once cedana starts shipping with a compatible binary
RUN <<EOT
set -eux
if [ "$(uname -m)" = "x86_64" ]; then
    apt-get install -y python3-protobuf libnet1 libnftables1 libnl-3-200 libprotobuf-c1 iptables
    curl -L -o criu.deb https://download.opensuse.org/repositories/devel:/tools:/criu/xUbuntu_22.04/amd64/criu_4.0-3_amd64.deb
    dpkg -i criu.deb
    rm criu.deb
fi
EOT

ARG CEDANA_VERSION=0.9.234
RUN <<EOT
set -eux
if [ "$(uname -m)" = "x86_64" ]; then
    apt-get install -y libgpgme11
    curl -L -o cedana_amd64.deb https://github.com/cedana/cedana/releases/download/v${CEDANA_VERSION}/cedana_${CEDANA_VERSION}_amd64.deb
    dpkg -i cedana_amd64.deb
    rm cedana_amd64.deb
fi
EOT

ARG CEDANA_TOKEN
ARG CEDANA_BASE_URL

RUN if [ -n "${CEDANA_TOKEN}" ]; then \
    curl -L -H "Authorization: Bearer ${CEDANA_TOKEN}" ${CEDANA_BASE_URL}/k8s/gpu/gpucontroller -o /usr/local/bin/cedana-gpu-controller && \
    chmod +x /usr/local/bin/cedana-gpu-controller && \
    curl -L -H "Authorization: Bearer ${CEDANA_TOKEN}" ${CEDANA_BASE_URL}/k8s/gpu/libcedana -o /usr/local/lib/libcedana-gpu.so && \
    chmod +x /usr/local/lib/libcedana-gpu.so; \
    fi

ARG TARGETARCH

ENV MOUNT_S3_URL_ARM64="https://s3.amazonaws.com/mountpoint-s3-release/1.8.0/arm64/mount-s3-1.8.0-arm64.tar.gz"
ENV MOUNT_S3_URL_AMD64="https://s3.amazonaws.com/mountpoint-s3-release/1.8.0/x86_64/mount-s3-1.8.0-x86_64.tar.gz"

RUN MOUNT_S3_URL=$(if [ "$TARGETARCH" = "arm64" ]; then echo $MOUNT_S3_URL_ARM64; else echo $MOUNT_S3_URL_AMD64; fi) && \
    curl -O $MOUNT_S3_URL && \
    TARBALL=$(basename $MOUNT_S3_URL) && \
    mkdir mount-s3 && \
    tar -xzf $TARBALL -C mount-s3 && \
    mv mount-s3/bin/mount-s3 /usr/local/bin/ms3 && chmod +x /usr/local/bin/ms3 && \
    rm -rf mount-s3 $TARBALL


RUN if [ "$(uname -m)" = "x86_64" ]; then \
    curl -L https://beam-runner-python-deps.s3.amazonaws.com/cuno_1.2.6_amd64_glibc.deb -o /tmp/cuno_1.2.6_amd64_glibc.deb && \
    apt-get install -y /tmp/cuno_1.2.6_amd64_glibc.deb && rm /tmp/cuno_1.2.6_amd64_glibc.deb; \
    fi

RUN apt-get remove -y curl && \
    apt-get clean && apt-get autoremove -y && apt-get autopurge -y && \
    rm -rf /var/lib/apt/lists/* /var/log/*


ENV BUILDAH_RUNTIME=/usr/local/sbin/runc
RUN echo "nameserver 8.8.8.8" > /workspace/resolv.conf
COPY --from=runc /usr/local/sbin/runc /usr/local/sbin/runc
COPY --from=skopeo /usr/local/bin/skopeo /usr/local/bin/skopeo
COPY --from=skopeo /workspace/default-policy.json /etc/containers/policy.json
COPY --from=nvidia-container-toolkit /workspace/nvidia-container-runtime* /usr/bin/
COPY ./bin/volume_cache.so /usr/local/lib/volume_cache.so
COPY --from=worker /usr/local/bin/worker /usr/local/bin/worker
COPY ./sdk/src/beta9 /workspace/sdk
COPY --from=buildah /usr/local/bin/buildah /usr/local/bin/buildah

VOLUME "/usr/lib/x86_64-linux-gnu"
VOLUME "/usr/lib/aarch64-linux-gnu"

ENV _BUILDAH_STARTED_IN_USERNS="" \
    BUILDAH_ISOLATION=chroot
