# syntax=docker/dockerfile:1.6
ARG BASE_STAGE=dev

FROM golang:1.21-bullseye AS golang

RUN <<EOT
set -eux
apt-get update
apt-get install -y --no-install-recommends curl git
EOT


# Skopeo
# ========================
FROM golang AS skopeo

WORKDIR /workspace

ENV CGO_ENABLED="0"  \
    DISABLE_DOCS="1" \
    GO_DYN_FLAGS=""  \
    BUILDTAGS="containers_image_openpgp"

RUN <<EOT
set -eux
git clone https://github.com/containers/skopeo.git .
make
make install
/usr/local/bin/skopeo --version
EOT


# RUNC
# ========================
FROM golang AS runc

WORKDIR /workspace

RUN apt-get install -y --no-install-recommends libseccomp-dev

RUN <<EOT
set -eux
git clone https://github.com/beam-cloud/runc.git .
make
make install
/usr/local/sbin/runc --version
EOT


# Beam Worker
# ========================
FROM golang AS worker

WORKDIR /workspace

COPY go.mod go.sum ./
RUN go mod download

COPY . .
RUN go build -o /usr/local/bin/worker ./cmd/worker/main.go


# NVIDIA CUDA - Final Stage
# ========================
FROM nvidia/cuda:12.3.1-base-ubuntu20.04 AS release
FROM release AS dev

FROM ${BASE_STAGE} AS final

ENV DEBIAN_FRONTEND="noninteractive"
WORKDIR /workspace

RUN rm /etc/apt/sources.list.d/cuda.list && apt-get update && apt-get install -y wget git curl \
    libseccomp-dev libsndfile1 libsndfile1-dev \
    libaio-dev asciidoc xmlto libzmq3-dev iptables \
    build-essential git libprotobuf-dev libprotobuf-c-dev \
    protobuf-c-compiler protobuf-compiler \
    pkg-config libbsd-dev iproute2 \
    libnftnl-dev libcap-dev libnet1-dev libnl-3-dev \
    python3 python3.8 python3-distutils python3-pip \
    curl gpg fuse3

COPY --from=golang /usr/local/go/ /usr/local/go/
ENV PATH="/usr/local/go/bin:${PATH}"

RUN <<EOT
set -eux

# JuiceFS
curl -sSL https://d.juicefs.com/install | sh -

# nvidia-container-toolkit repo
# curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
# echo 'deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://nvidia.github.io/libnvidia-container/stable/deb/$(ARCH) /' > /etc/apt/sources.list.d/nvidia-container-toolkit.list
curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | apt-key add -
curl -s -L https://nvidia.github.io/nvidia-container-runtime/ubuntu20.04/nvidia-container-runtime.list | tee /etc/apt/sources.list.d/nvidia-container-runtime.list
apt-get update && apt-get install -y nvidia-container-runtime fuse3 libfuse3-dev

# Build and install custom nvidia-container-toolkit
git clone https://github.com/beam-cloud/nvidia-container-toolkit.git
cd /workspace/nvidia-container-toolkit && make build && make binaries
cp /workspace/nvidia-container-toolkit/nvidia-container-runtime* /usr/bin/

# criu repo
curl -fsSL https://download.opensuse.org/repositories/devel:/tools:/criu/xUbuntu_20.04/Release.key | gpg --dearmor -o /usr/share/keyrings/criu.gpg
echo 'deb [signed-by=/usr/share/keyrings/criu.gpg] https://download.opensuse.org/repositories/devel:/tools:/criu/xUbuntu_20.04 /' > /etc/apt/sources.list.d/criu.list

apt-get update
apt-get install -y --no-install-recommends nvidia-container-runtime criu
apt-get remove -y curl gpg
apt-get clean
apt-get autoremove -y
apt-get autopurge -y
rm -rf /var/lib/apt/lists/* /var/log/*
EOT

COPY --from=runc /usr/local/sbin/runc /usr/local/sbin/runc
COPY --from=skopeo /usr/local/bin/skopeo /usr/local/bin/skopeo
COPY --from=skopeo /workspace/default-policy.json /etc/containers/policy.json
COPY --from=worker /usr/local/bin/worker /usr/local/bin/worker
COPY ./sdk/src/beam /workspace/sdk

VOLUME ["/usr/lib/x86_64-linux-gnu", "/usr/lib/aarch64-linux-gnu"]
